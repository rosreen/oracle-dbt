{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.2", "generated_at": "2023-07-27T16:51:43.517328Z", "invocation_id": "9d2ac948-91ed-4887-96b1-d8e295887402", "env": {}, "project_id": "b40e64e8a5bcfddcdf404d328e4d9e78", "user_id": "f11e3843-f1df-41f2-94db-ff83a90486e6", "send_anonymous_usage_stats": true, "adapter_type": "oracle"}, "nodes": {"model.oracle_dbt.stg_users": {"database": "None", "schema": "FAWDBTCORE", "name": "stg_users", "resource_type": "model", "package_name": "oracle_dbt", "path": "staging/stg_users.sql", "original_file_path": "models/staging/stg_users.sql", "unique_id": "model.oracle_dbt.stg_users", "fqn": ["oracle_dbt", "staging", "stg_users"], "alias": "stg_users", "checksum": {"name": "sha256", "checksum": "c19d27ed956f9a9289d5f3b9980ce3134507cb0cdc449c526b3221a28dd1302b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/staging/stg_users.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689010794.803534, "relation_name": "FAWDBTCORE.stg_users", "raw_code": "with users as (\n\n    select * from {{ ref('raw_users') }}\n),\n\nusers_cleaned as (\n    SELECT DISTINCT *\n    FROM users\n)\n\nselect * from users_cleaned", "language": "sql", "refs": [{"name": "raw_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.oracle_dbt.raw_users"]}, "compiled_path": "target/compiled/oracle_dbt/models/staging/stg_users.sql", "compiled": true, "compiled_code": "with users as (\n\n    select * from FAWDBTCORE.raw_users\n),\n\nusers_cleaned as (\n    SELECT DISTINCT *\n    FROM users\n)\n\nselect * from users_cleaned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "seed.oracle_dbt.raw_users": {"database": "None", "schema": "FAWDBTCORE", "name": "raw_users", "resource_type": "seed", "package_name": "oracle_dbt", "path": "raw_users.csv", "original_file_path": "seeds/raw_users.csv", "unique_id": "seed.oracle_dbt.raw_users", "fqn": ["oracle_dbt", "raw_users"], "alias": "raw_users", "checksum": {"name": "sha256", "checksum": "ef42452112a2dd3fff68fbe9ff4d5f9762c65ec035590b9c452aec8b4a281391"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689010794.8335512, "relation_name": "FAWDBTCORE.raw_users", "raw_code": "", "root_path": "/Users/rosreen/Desktop/oracle-dbt", "depends_on": {"macros": []}}, "seed.oracle_dbt.invoices": {"database": "None", "schema": "FAWDBTCORE", "name": "invoices", "resource_type": "seed", "package_name": "oracle_dbt", "path": "invoices.csv", "original_file_path": "seeds/invoices.csv", "unique_id": "seed.oracle_dbt.invoices", "fqn": ["oracle_dbt", "invoices"], "alias": "invoices", "checksum": {"name": "path", "checksum": "seeds/invoices.csv"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689183088.9020429, "relation_name": "FAWDBTCORE.invoices", "raw_code": "", "root_path": "/Users/rosreen/Desktop/oracle-dbt", "depends_on": {"macros": []}}, "model.oracle_dbt.stg_invoices": {"database": "None", "schema": "FAWDBTCORE", "name": "stg_invoices", "resource_type": "model", "package_name": "oracle_dbt", "path": "staging/stg_invoices.sql", "original_file_path": "models/staging/stg_invoices.sql", "unique_id": "model.oracle_dbt.stg_invoices", "fqn": ["oracle_dbt", "staging", "stg_invoices"], "alias": "stg_invoices", "checksum": {"name": "sha256", "checksum": "b6bdaf253807d1bc124194e2a39218a8acafb29788b9acc3994672ca6ade1c2c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/staging/stg_invoices.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689183958.0267851, "relation_name": "FAWDBTCORE.stg_invoices", "raw_code": "with invoice as (\n\n    select * from {{ ref('invoices') }}\n)\n\nselect * from invoice", "language": "sql", "refs": [{"name": "invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.oracle_dbt.invoices"]}, "compiled_path": "target/compiled/oracle_dbt/models/staging/stg_invoices.sql", "compiled": true, "compiled_code": "with invoice as (\n\n    select * from FAWDBTCORE.invoices\n)\n\nselect * from invoice", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.invoice_model": {"database": "None", "schema": "FAWDBTCORE", "name": "invoice_model", "resource_type": "model", "package_name": "oracle_dbt", "path": "invoice_model.py", "original_file_path": "models/invoice_model.py", "unique_id": "model.oracle_dbt.invoice_model", "fqn": ["oracle_dbt", "invoice_model"], "alias": "invoice_model", "checksum": {"name": "sha256", "checksum": "78c679536d7839bfddb776653b2441aca202618bb42ad95aa26841afb50f8880"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "async_flag": true, "timeout": 1800, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/invoice_model.py", "deferred": false, "unrendered_config": {"materialized": "table", "async_flag": true, "timeout": 1800}, "created_at": 1689202651.663947, "relation_name": "FAWDBTCORE.invoice_model", "raw_code": "import pandas as pd\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing import LabelEncoder\n\nimport numpy as np\nfrom sklearn.preprocessing import OrdinalEncoder\ndef model(dbt, session):\n\n    dbt.config(materialized=\"table\")\n    dbt.config(async_flag=True)  # run the python function in async mode\n    dbt.config(timeout=1800)  # timeout of 30 minutes\n    data = dbt.ref( \"invoices\")\n    data = data.pull()\n# Encode categorical values to numeric values\n    def label_encode(df,col):\n        categories = df[col].tolist()\n        encoder = LabelEncoder()\n        labels = encoder.fit_transform(categories)\n        return labels\n\n    data[\"HEADER_CREATED_BY_USER_ID_LABELS\"] = label_encode(data,\"HEADER_CREATED_BY_USER_ID\")\n    data[\"HEADER_UPDATED_BY_USER_ID_LABELS\"] = label_encode(data,\"HEADER_UPDATED_BY_USER_ID\")\n    data[\"FISCAL_PERIOD_SET_NAME_LABELS\"] = label_encode(data,\"FISCAL_PERIOD_SET_NAME\")\n\n    cols = [\"REMAINING_GLOBAL_AMOUNT\",\"HEADER_UPDATED_BY_USER_ID_LABELS\",\"HEADER_CREATED_BY_USER_ID_LABELS\",\"FISCAL_PERIOD_SET_NAME_LABELS\",\"PAYABLES_BU_ID\"]\n    data = data[cols]\n    data = data.dropna()\n\n    # Define the features\n    features = data.columns\n\n    # Train the Isolation Forest model\n    model = IsolationForest(n_estimators=100, contamination=\"auto\")\n    model.fit(data[features])\n\n    # Predict the anomalies\n    anomalies = model.predict(data[features])\n\n    # Add the anomalies to the original data\n    data[\"anomaly\"] = anomalies\n\n\n    return data", "language": "python", "refs": [{"name": "invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_oracle.py_script_postfix"], "nodes": ["seed.oracle_dbt.invoices"]}, "compiled_path": "target/compiled/oracle_dbt/models/invoice_model.py", "compiled": true, "compiled_code": "import pandas as pd\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing import LabelEncoder\n\nimport numpy as np\nfrom sklearn.preprocessing import OrdinalEncoder\ndef model(dbt, session):\n\n    dbt.config(materialized=\"table\")\n    dbt.config(async_flag=True)  # run the python function in async mode\n    dbt.config(timeout=1800)  # timeout of 30 minutes\n    data = dbt.ref( \"invoices\")\n    data = data.pull()\n# Encode categorical values to numeric values\n    def label_encode(df,col):\n        categories = df[col].tolist()\n        encoder = LabelEncoder()\n        labels = encoder.fit_transform(categories)\n        return labels\n\n    data[\"HEADER_CREATED_BY_USER_ID_LABELS\"] = label_encode(data,\"HEADER_CREATED_BY_USER_ID\")\n    data[\"HEADER_UPDATED_BY_USER_ID_LABELS\"] = label_encode(data,\"HEADER_UPDATED_BY_USER_ID\")\n    data[\"FISCAL_PERIOD_SET_NAME_LABELS\"] = label_encode(data,\"FISCAL_PERIOD_SET_NAME\")\n\n    cols = [\"REMAINING_GLOBAL_AMOUNT\",\"HEADER_UPDATED_BY_USER_ID_LABELS\",\"HEADER_CREATED_BY_USER_ID_LABELS\",\"FISCAL_PERIOD_SET_NAME_LABELS\",\"PAYABLES_BU_ID\"]\n    data = data[cols]\n    data = data.dropna()\n\n    # Define the features\n    features = data.columns\n\n    # Train the Isolation Forest model\n    model = IsolationForest(n_estimators=100, contamination=\"auto\")\n    model.fit(data[features])\n\n    # Predict the anomalies\n    anomalies = model.predict(data[features])\n\n    # Add the anomalies to the original data\n    data[\"anomaly\"] = anomalies\n\n\n    return data\n\n\ndef main():\n    import oml\n    import pandas as pd\n    def ref(*args, **kwargs):\n        refs = {\"invoices\": \"FAWDBTCORE.invoices\"}\n        key = \".\".join(args)\n        version = kwargs.get(\"v\") or kwargs.get(\"version\")\n        if version:\n            key += f\".v{version}\"\n        schema, table = refs[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    def source(*args, dbt_load_df_function):\n        sources = {}\n        key = \".\".join(args)\n        schema, table = sources[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    config_dict = {}\n\n\n    class config:\n        def __init__(self, *args, **kwargs):\n            pass\n\n        @staticmethod\n        def get(key, default=None):\n            return config_dict.get(key, default)\n\n    class this:\n        \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n        database = \"None\"\n        schema = \"FAWDBTCORE\"\n        identifier = \"invoice_model\"\n        def __repr__(self):\n            return \"FAWDBTCORE.invoice_model\"\n\n\n    class dbtObj:\n        def __init__(self, load_df_function) -> None:\n            self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n            self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n            self.config = config\n            self.this = this()\n            self.is_incremental = False\n\n    import pandas as pd\n    from sklearn.ensemble import IsolationForest\n    from sklearn.preprocessing import LabelEncoder\n    \n    import numpy as np\n    from sklearn.preprocessing import OrdinalEncoder\n    def model(dbt, session):\n    \n        dbt.config(materialized=\"table\")\n        dbt.config(async_flag=True)  # run the python function in async mode\n        dbt.config(timeout=1800)  # timeout of 30 minutes\n        data = dbt.ref( \"invoices\")\n        data = data.pull()\n    # Encode categorical values to numeric values\n        def label_encode(df,col):\n            categories = df[col].tolist()\n            encoder = LabelEncoder()\n            labels = encoder.fit_transform(categories)\n            return labels\n    \n        data[\"HEADER_CREATED_BY_USER_ID_LABELS\"] = label_encode(data,\"HEADER_CREATED_BY_USER_ID\")\n        data[\"HEADER_UPDATED_BY_USER_ID_LABELS\"] = label_encode(data,\"HEADER_UPDATED_BY_USER_ID\")\n        data[\"FISCAL_PERIOD_SET_NAME_LABELS\"] = label_encode(data,\"FISCAL_PERIOD_SET_NAME\")\n    \n        cols = [\"REMAINING_GLOBAL_AMOUNT\",\"HEADER_UPDATED_BY_USER_ID_LABELS\",\"HEADER_CREATED_BY_USER_ID_LABELS\",\"FISCAL_PERIOD_SET_NAME_LABELS\",\"PAYABLES_BU_ID\"]\n        data = data[cols]\n        data = data.dropna()\n    \n        # Define the features\n        features = data.columns\n    \n        # Train the Isolation Forest model\n        model = IsolationForest(n_estimators=100, contamination=\"auto\")\n        model.fit(data[features])\n    \n        # Predict the anomalies\n        anomalies = model.predict(data[features])\n    \n        # Add the anomalies to the original data\n        data[\"anomaly\"] = anomalies\n    \n    \n        return data\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.average_duration_by_platform_country": {"database": "None", "schema": "FAWDBTCORE", "name": "average_duration_by_platform_country", "resource_type": "model", "package_name": "oracle_dbt", "path": "average_duration_by_platform_country.sql", "original_file_path": "models/average_duration_by_platform_country.sql", "unique_id": "model.oracle_dbt.average_duration_by_platform_country", "fqn": ["oracle_dbt", "average_duration_by_platform_country"], "alias": "average_duration_by_platform_country", "checksum": {"name": "sha256", "checksum": "f03fc494403a5db79d9c3a4c16431a34869c694ef975a0cbeca9a218d668ef6c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"platform": {"name": "platform", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_duration": {"name": "avg_duration", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "oracle_dbt://models/schema.yml", "build_path": "target/run/oracle_dbt/models/average_duration_by_platform_country.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.258809, "relation_name": "FAWDBTCORE.average_duration_by_platform_country", "raw_code": "with start_web_events_cleaned as (\n\n    select * from {{ ref('combined_categorized_events') }}\n), \n\naverage_duration_by_platform_country as (\n\nSELECT\n  platform,\n  country,\n  ROUND(AVG(CASE WHEN platform = 'Web' THEN web_duration_seconds ELSE mobile_duration_seconds END), 2) AS avg_duration\nFROM combined_categorized_events\nGROUP BY platform, country\nORDER BY platform\n)\n\nselect * from average_duration_by_platform_country", "language": "sql", "refs": [{"name": "combined_categorized_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.combined_categorized_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/average_duration_by_platform_country.sql", "compiled": true, "compiled_code": "with start_web_events_cleaned as (\n\n    select * from FAWDBTCORE.combined_categorized_events\n), \n\naverage_duration_by_platform_country as (\n\nSELECT\n  platform,\n  country,\n  ROUND(AVG(CASE WHEN platform = 'Web' THEN web_duration_seconds ELSE mobile_duration_seconds END), 2) AS avg_duration\nFROM combined_categorized_events\nGROUP BY platform, country\nORDER BY platform\n)\n\nselect * from average_duration_by_platform_country", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.event_counts_by_platform": {"database": "None", "schema": "FAWDBTCORE", "name": "event_counts_by_platform", "resource_type": "model", "package_name": "oracle_dbt", "path": "event_counts_by_platform.sql", "original_file_path": "models/event_counts_by_platform.sql", "unique_id": "model.oracle_dbt.event_counts_by_platform", "fqn": ["oracle_dbt", "event_counts_by_platform"], "alias": "event_counts_by_platform", "checksum": {"name": "sha256", "checksum": "46c65c3c4297f47931bf5364faf846699f4e9649e7b830c494508733cb2e9140"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"platform": {"name": "platform", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_count": {"name": "event_count", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "oracle_dbt://models/schema.yml", "build_path": "target/run/oracle_dbt/models/event_counts_by_platform.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.2594361, "relation_name": "FAWDBTCORE.event_counts_by_platform", "raw_code": "with events as (\n\n    select * from {{ ref('combined_categorized_events') }}\n),\n\n\nevent_counts_by_platform as (\n\n    SELECT\n  platform,\n  COUNT(*) AS event_count\nFROM events\nGROUP BY platform\n)\n\nselect * from event_counts_by_platform", "language": "sql", "refs": [{"name": "combined_categorized_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.combined_categorized_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/event_counts_by_platform.sql", "compiled": true, "compiled_code": "with events as (\n\n    select * from FAWDBTCORE.combined_categorized_events\n),\n\n\nevent_counts_by_platform as (\n\n    SELECT\n  platform,\n  COUNT(*) AS event_count\nFROM events\nGROUP BY platform\n)\n\nselect * from event_counts_by_platform", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.event_type_counts": {"database": "None", "schema": "FAWDBTCORE", "name": "event_type_counts", "resource_type": "model", "package_name": "oracle_dbt", "path": "event_type_counts.sql", "original_file_path": "models/event_type_counts.sql", "unique_id": "model.oracle_dbt.event_type_counts", "fqn": ["oracle_dbt", "event_type_counts"], "alias": "event_type_counts", "checksum": {"name": "sha256", "checksum": "43defab2afb72c930412f5f12a1f7edbb5d8baa02130d0802b0ec32ebbc7d76b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/event_type_counts.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.211615, "relation_name": "FAWDBTCORE.event_type_counts", "raw_code": "with events as (\n\n    select * from {{ ref('combined_categorized_events') }}\n),\n\n\nevent_type_counts as (\nSELECT EVENT_TYPE, \n       COUNT(CASE WHEN DEVICE_TYPE = 'Mobile' THEN 1 END) AS Mobile_Count,\n       COUNT(CASE WHEN DEVICE_TYPE = 'Desktop' THEN 1 END) AS Desktop_Count\nFROM combined_categorized_events\nGROUP BY EVENT_TYPE\n)\n\nselect * from event_type_counts", "language": "sql", "refs": [{"name": "combined_categorized_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.combined_categorized_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/event_type_counts.sql", "compiled": true, "compiled_code": "with events as (\n\n    select * from FAWDBTCORE.combined_categorized_events\n),\n\n\nevent_type_counts as (\nSELECT EVENT_TYPE, \n       COUNT(CASE WHEN DEVICE_TYPE = 'Mobile' THEN 1 END) AS Mobile_Count,\n       COUNT(CASE WHEN DEVICE_TYPE = 'Desktop' THEN 1 END) AS Desktop_Count\nFROM combined_categorized_events\nGROUP BY EVENT_TYPE\n)\n\nselect * from event_type_counts", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.combined_categorized_events": {"database": "None", "schema": "FAWDBTCORE", "name": "combined_categorized_events", "resource_type": "model", "package_name": "oracle_dbt", "path": "combined_categorized_events.sql", "original_file_path": "models/combined_categorized_events.sql", "unique_id": "model.oracle_dbt.combined_categorized_events", "fqn": ["oracle_dbt", "combined_categorized_events"], "alias": "combined_categorized_events", "checksum": {"name": "sha256", "checksum": "a2d8a034981b596536966b79484304c76eff5af5ed3d4455cb5bf7537ac2ad95"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/combined_categorized_events.sql", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689632368.2132459, "relation_name": "FAWDBTCORE.combined_categorized_events", "raw_code": "{{\n    config(\n        materialized='incremental'  \n              )\n}}\n\nwith start_web_events_cleaned as (\n\n    select * from {{ ref('stg_web_events') }}\n),\n\nstart_mobile_events_cleaned as (\n\n    select * from {{ ref('stg_mobile_events') }}\n), \n\ncategorized_web_events as (\nSELECT\n  event_id,\n  event_type,\n  event_timestamp,\n  user_id,\n  page_url,\n  browser,\n  device_type,\n  country,\n  duration_seconds,\n  created_at,\n  conversion_status,\n  CASE\n    WHEN duration_seconds < 60 THEN 'Short'\n    WHEN duration_seconds < 300 THEN 'Medium'\n    ELSE 'Long'\n  END AS duration_category\nFROM start_web_events_cleaned\n\n\n),\n\n categorized_mobile_events as (\nSELECT\n  event_id,\n  event_type,\n  event_timestamp,\n  user_id,\n  app_name,\n  operating_system,\n  country,\n  duration_seconds,\n  created_at,\n  conversion_status,\n  CASE\n    WHEN conversion_status = 'Completed' THEN 'Successful'\n    ELSE 'Unsuccessful'\n  END AS conversion_category\nFROM start_mobile_events_cleaned\n),\n\n\ncombined_categorized_events as (\n    SELECT\n  event_id,\n  event_type,\n  event_timestamp,\n  user_id,\n  page_url,\n  browser,\n  device_type,\n  country,\n  duration_seconds,\n  created_at,\n  conversion_status,\n  NULL AS app_name,\n  \n  CASE\n    WHEN device_type = 'Desktop' THEN 'Web'\n    ELSE 'Mobile'\n  END AS platform,\n  CASE\n    WHEN device_type = 'Desktop' THEN duration_seconds\n    ELSE NULL\n  END AS web_duration_seconds,\n  CASE\n    WHEN device_type = 'Mobile' THEN duration_seconds\n    ELSE NULL\n  END AS mobile_duration_seconds\nFROM categorized_web_events\nUNION ALL\nSELECT\n  event_id,\n  event_type,\n  event_timestamp,\n  user_id,\n  NULL AS page_url,\n  NULL AS browser,\n  NULL AS device_type,\n  country,\n  duration_seconds,\n  created_at,\n  conversion_status,\n  app_name,\n  \n  'Mobile' AS platform,\n  NULL AS web_duration_seconds,\n  duration_seconds AS mobile_duration_seconds\nFROM categorized_mobile_events\n)\n\n\nselect * from combined_categorized_events\n\n{% if is_incremental() %}\n\n  -- this filter will only be applied on an incremental run\nwhere created_at >= (select max(created_at) from {{ this }})\n\n{% endif %}", "language": "sql", "refs": [{"name": "stg_web_events", "package": null, "version": null}, {"name": "stg_mobile_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.oracle_dbt.stg_web_events", "model.oracle_dbt.stg_mobile_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/combined_categorized_events.sql", "compiled": true, "compiled_code": "\n\nwith start_web_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_web_events\n),\n\nstart_mobile_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_mobile_events\n), \n\ncategorized_web_events as (\nSELECT\n  event_id,\n  event_type,\n  event_timestamp,\n  user_id,\n  page_url,\n  browser,\n  device_type,\n  country,\n  duration_seconds,\n  created_at,\n  conversion_status,\n  CASE\n    WHEN duration_seconds < 60 THEN 'Short'\n    WHEN duration_seconds < 300 THEN 'Medium'\n    ELSE 'Long'\n  END AS duration_category\nFROM start_web_events_cleaned\n\n\n),\n\n categorized_mobile_events as (\nSELECT\n  event_id,\n  event_type,\n  event_timestamp,\n  user_id,\n  app_name,\n  operating_system,\n  country,\n  duration_seconds,\n  created_at,\n  conversion_status,\n  CASE\n    WHEN conversion_status = 'Completed' THEN 'Successful'\n    ELSE 'Unsuccessful'\n  END AS conversion_category\nFROM start_mobile_events_cleaned\n),\n\n\ncombined_categorized_events as (\n    SELECT\n  event_id,\n  event_type,\n  event_timestamp,\n  user_id,\n  page_url,\n  browser,\n  device_type,\n  country,\n  duration_seconds,\n  created_at,\n  conversion_status,\n  NULL AS app_name,\n  \n  CASE\n    WHEN device_type = 'Desktop' THEN 'Web'\n    ELSE 'Mobile'\n  END AS platform,\n  CASE\n    WHEN device_type = 'Desktop' THEN duration_seconds\n    ELSE NULL\n  END AS web_duration_seconds,\n  CASE\n    WHEN device_type = 'Mobile' THEN duration_seconds\n    ELSE NULL\n  END AS mobile_duration_seconds\nFROM categorized_web_events\nUNION ALL\nSELECT\n  event_id,\n  event_type,\n  event_timestamp,\n  user_id,\n  NULL AS page_url,\n  NULL AS browser,\n  NULL AS device_type,\n  country,\n  duration_seconds,\n  created_at,\n  conversion_status,\n  app_name,\n  \n  'Mobile' AS platform,\n  NULL AS web_duration_seconds,\n  duration_seconds AS mobile_duration_seconds\nFROM categorized_mobile_events\n)\n\n\nselect * from combined_categorized_events\n\n\n\n  -- this filter will only be applied on an incremental run\nwhere created_at >= (select max(created_at) from FAWDBTCORE.combined_categorized_events)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.mobile_event_durations": {"database": "None", "schema": "FAWDBTCORE", "name": "mobile_event_durations", "resource_type": "model", "package_name": "oracle_dbt", "path": "mobile_event_durations.sql", "original_file_path": "models/mobile_event_durations.sql", "unique_id": "model.oracle_dbt.mobile_event_durations", "fqn": ["oracle_dbt", "mobile_event_durations"], "alias": "mobile_event_durations", "checksum": {"name": "sha256", "checksum": "b694804455e7372ee405a2b4f57c08cec87908fcfad9266751f7e745addc4540"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"operating_system": {"name": "operating_system", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_duration": {"name": "avg_duration", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "oracle_dbt://models/schema.yml", "build_path": "target/run/oracle_dbt/models/mobile_event_durations.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.260044, "relation_name": "FAWDBTCORE.mobile_event_durations", "raw_code": "with start_web_events_cleaned as (\n\n    select * from {{ ref('stg_web_events') }}\n),\n\nstart_mobile_events_cleaned as (\n\n    select * from {{ ref('stg_mobile_events') }}\n),\n\ncombined_events as (\n    \nSELECT\n  w.event_id,\n  w.event_type AS web_event_type,\n  w.event_timestamp AS web_event_timestamp,\n  w.user_id AS web_user_id,\n  w.page_url,\n  w.browser,\n  w.device_type AS web_device_type,\n  w.country AS web_country,\n  w.duration_seconds AS web_duration_seconds,\n  w.conversion_status AS web_conversion_status,\n  m.event_type AS mobile_event_type,\n  m.event_timestamp AS mobile_event_timestamp,\n  m.user_id AS mobile_user_id,\n  m.app_name,\n  m.operating_system,\n  m.country AS mobile_country,\n  m.duration_seconds AS mobile_duration_seconds,\n  m.conversion_status AS mobile_conversion_status\nFROM start_web_events_cleaned w\nJOIN start_mobile_events_cleaned m ON w.event_id = m.event_id\n\n),\n\nmobile_event_durations as (\nSELECT\n  operating_system,\n  AVG(mobile_duration_seconds) AS avg_duration\nFROM combined_events\nGROUP BY operating_system\n)\n\nselect * from mobile_event_durations", "language": "sql", "refs": [{"name": "stg_web_events", "package": null, "version": null}, {"name": "stg_mobile_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.stg_web_events", "model.oracle_dbt.stg_mobile_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/mobile_event_durations.sql", "compiled": true, "compiled_code": "with start_web_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_web_events\n),\n\nstart_mobile_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_mobile_events\n),\n\ncombined_events as (\n    \nSELECT\n  w.event_id,\n  w.event_type AS web_event_type,\n  w.event_timestamp AS web_event_timestamp,\n  w.user_id AS web_user_id,\n  w.page_url,\n  w.browser,\n  w.device_type AS web_device_type,\n  w.country AS web_country,\n  w.duration_seconds AS web_duration_seconds,\n  w.conversion_status AS web_conversion_status,\n  m.event_type AS mobile_event_type,\n  m.event_timestamp AS mobile_event_timestamp,\n  m.user_id AS mobile_user_id,\n  m.app_name,\n  m.operating_system,\n  m.country AS mobile_country,\n  m.duration_seconds AS mobile_duration_seconds,\n  m.conversion_status AS mobile_conversion_status\nFROM start_web_events_cleaned w\nJOIN start_mobile_events_cleaned m ON w.event_id = m.event_id\n\n),\n\nmobile_event_durations as (\nSELECT\n  operating_system,\n  AVG(mobile_duration_seconds) AS avg_duration\nFROM combined_events\nGROUP BY operating_system\n)\n\nselect * from mobile_event_durations", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.most_active_mobile_users": {"database": "None", "schema": "FAWDBTCORE", "name": "most_active_mobile_users", "resource_type": "model", "package_name": "oracle_dbt", "path": "most_active_mobile_users.sql", "original_file_path": "models/most_active_mobile_users.sql", "unique_id": "model.oracle_dbt.most_active_mobile_users", "fqn": ["oracle_dbt", "most_active_mobile_users"], "alias": "most_active_mobile_users", "checksum": {"name": "sha256", "checksum": "8838ecf5829364dd5b063e99ea6695a8930efd576d9a8bc1035ac06c52aaab7c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_mobile_events": {"name": "num_mobile_events", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "oracle_dbt://models/schema.yml", "build_path": "target/run/oracle_dbt/models/most_active_mobile_users.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.260585, "relation_name": "FAWDBTCORE.most_active_mobile_users", "raw_code": "with start_web_events_cleaned as (\n\n    select * from {{ ref('stg_web_events') }}\n),\n\nstart_mobile_events_cleaned as (\n\n    select * from {{ ref('stg_mobile_events') }}\n), \n\nstart_users_cleaned as (\n\n    select * from {{ ref('stg_users') }}\n),\n\nmobile_users_names as (\n    select start_users_cleaned.name, count(start_mobile_events_cleaned.event_id) as num_mobile_events\n    from start_users_cleaned\n    join start_mobile_events_cleaned on start_mobile_events_cleaned.user_id = start_users_cleaned.user_id\n    group by start_users_cleaned.name\n    ORDER BY num_mobile_events DESC\n)\n\nselect * from mobile_users_names", "language": "sql", "refs": [{"name": "stg_web_events", "package": null, "version": null}, {"name": "stg_mobile_events", "package": null, "version": null}, {"name": "stg_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.stg_web_events", "model.oracle_dbt.stg_mobile_events", "model.oracle_dbt.stg_users"]}, "compiled_path": "target/compiled/oracle_dbt/models/most_active_mobile_users.sql", "compiled": true, "compiled_code": "with start_web_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_web_events\n),\n\nstart_mobile_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_mobile_events\n), \n\nstart_users_cleaned as (\n\n    select * from FAWDBTCORE.stg_users\n),\n\nmobile_users_names as (\n    select start_users_cleaned.name, count(start_mobile_events_cleaned.event_id) as num_mobile_events\n    from start_users_cleaned\n    join start_mobile_events_cleaned on start_mobile_events_cleaned.user_id = start_users_cleaned.user_id\n    group by start_users_cleaned.name\n    ORDER BY num_mobile_events DESC\n)\n\nselect * from mobile_users_names", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.most_frequent_browser": {"database": "None", "schema": "FAWDBTCORE", "name": "most_frequent_browser", "resource_type": "model", "package_name": "oracle_dbt", "path": "most_frequent_browser.sql", "original_file_path": "models/most_frequent_browser.sql", "unique_id": "model.oracle_dbt.most_frequent_browser", "fqn": ["oracle_dbt", "most_frequent_browser"], "alias": "most_frequent_browser", "checksum": {"name": "sha256", "checksum": "5acb0f43b4faa5f556389467c3a427a68ee798d38c8407a27f73f31e10f5cde5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"name": {"name": "name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_frequent_browser": {"name": "most_frequent_browser", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "oracle_dbt://models/schema.yml", "build_path": "target/run/oracle_dbt/models/most_frequent_browser.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.261098, "relation_name": "FAWDBTCORE.most_frequent_browser", "raw_code": "with start_web_events_cleaned as (\n\n    select * from {{ ref('stg_web_events') }}\n),\n\nstart_mobile_events_cleaned as (\n\n    select * from {{ ref('stg_mobile_events') }}\n), \n\nstart_users_cleaned as (\n\n    select * from {{ ref('stg_users') }}\n),\n\nweb_users_names as (\n      SELECT u.name, w.most_frequent_browser\nFROM start_users_cleaned u\nJOIN (\n  SELECT w.user_id, w.browser AS most_frequent_browser\n  FROM (\n    SELECT user_id, browser, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY COUNT(*) DESC) AS rn\n    FROM start_web_events_cleaned\n    GROUP BY user_id, browser\n  ) w\n  WHERE rn = 1\n) w ON u.user_id = w.user_id\n)\n\nselect * from web_users_names", "language": "sql", "refs": [{"name": "stg_web_events", "package": null, "version": null}, {"name": "stg_mobile_events", "package": null, "version": null}, {"name": "stg_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.stg_web_events", "model.oracle_dbt.stg_mobile_events", "model.oracle_dbt.stg_users"]}, "compiled_path": "target/compiled/oracle_dbt/models/most_frequent_browser.sql", "compiled": true, "compiled_code": "with start_web_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_web_events\n),\n\nstart_mobile_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_mobile_events\n), \n\nstart_users_cleaned as (\n\n    select * from FAWDBTCORE.stg_users\n),\n\nweb_users_names as (\n      SELECT u.name, w.most_frequent_browser\nFROM start_users_cleaned u\nJOIN (\n  SELECT w.user_id, w.browser AS most_frequent_browser\n  FROM (\n    SELECT user_id, browser, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY COUNT(*) DESC) AS rn\n    FROM start_web_events_cleaned\n    GROUP BY user_id, browser\n  ) w\n  WHERE rn = 1\n) w ON u.user_id = w.user_id\n)\n\nselect * from web_users_names", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.web_events_counts": {"database": "None", "schema": "FAWDBTCORE", "name": "web_events_counts", "resource_type": "model", "package_name": "oracle_dbt", "path": "web_events_counts.sql", "original_file_path": "models/web_events_counts.sql", "unique_id": "model.oracle_dbt.web_events_counts", "fqn": ["oracle_dbt", "web_events_counts"], "alias": "web_events_counts", "checksum": {"name": "sha256", "checksum": "16ddfacf214f7707689928fbde78d84dde062aadaf90257775622d7b8b72313f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/web_events_counts.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.224875, "relation_name": "FAWDBTCORE.web_events_counts", "raw_code": "with start_web_events_cleaned as (\n\n    select * from {{ ref('stg_web_events') }}\n),\n\nstart_mobile_events_cleaned as (\n\n    select * from {{ ref('stg_mobile_events') }}\n),\n\ncombined_events as (\n    \nSELECT\n  w.event_id,\n  w.event_type AS web_event_type,\n  w.event_timestamp AS web_event_timestamp,\n  w.user_id AS web_user_id,\n  w.page_url,\n  w.browser,\n  w.device_type AS web_device_type,\n  w.country AS web_country,\n  w.duration_seconds AS web_duration_seconds,\n  w.conversion_status AS web_conversion_status,\n  m.event_type AS mobile_event_type,\n  m.event_timestamp AS mobile_event_timestamp,\n  m.user_id AS mobile_user_id,\n  m.app_name,\n  m.operating_system,\n  m.country AS mobile_country,\n  m.duration_seconds AS mobile_duration_seconds,\n  m.conversion_status AS mobile_conversion_status\nFROM start_web_events_cleaned w\nJOIN start_mobile_events_cleaned m ON w.event_id = m.event_id\n\n),\n\nweb_events_counts as (\n    SELECT\n  web_event_type,\n  COUNT(*) AS event_count\nFROM combined_events\nGROUP BY web_event_type\n)\n\nselect * from web_events_counts", "language": "sql", "refs": [{"name": "stg_web_events", "package": null, "version": null}, {"name": "stg_mobile_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.stg_web_events", "model.oracle_dbt.stg_mobile_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/web_events_counts.sql", "compiled": true, "compiled_code": "with start_web_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_web_events\n),\n\nstart_mobile_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_mobile_events\n),\n\ncombined_events as (\n    \nSELECT\n  w.event_id,\n  w.event_type AS web_event_type,\n  w.event_timestamp AS web_event_timestamp,\n  w.user_id AS web_user_id,\n  w.page_url,\n  w.browser,\n  w.device_type AS web_device_type,\n  w.country AS web_country,\n  w.duration_seconds AS web_duration_seconds,\n  w.conversion_status AS web_conversion_status,\n  m.event_type AS mobile_event_type,\n  m.event_timestamp AS mobile_event_timestamp,\n  m.user_id AS mobile_user_id,\n  m.app_name,\n  m.operating_system,\n  m.country AS mobile_country,\n  m.duration_seconds AS mobile_duration_seconds,\n  m.conversion_status AS mobile_conversion_status\nFROM start_web_events_cleaned w\nJOIN start_mobile_events_cleaned m ON w.event_id = m.event_id\n\n),\n\nweb_events_counts as (\n    SELECT\n  web_event_type,\n  COUNT(*) AS event_count\nFROM combined_events\nGROUP BY web_event_type\n)\n\nselect * from web_events_counts", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.web_events_distinct_vals": {"database": "None", "schema": "FAWDBTCORE", "name": "web_events_distinct_vals", "resource_type": "model", "package_name": "oracle_dbt", "path": "web_events_distinct_vals.sql", "original_file_path": "models/web_events_distinct_vals.sql", "unique_id": "model.oracle_dbt.web_events_distinct_vals", "fqn": ["oracle_dbt", "web_events_distinct_vals"], "alias": "web_events_distinct_vals", "checksum": {"name": "sha256", "checksum": "7076368bdec4fc9119fafeca8cf0d20e38f6e6a822a3605946a4799ee9a97a54"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/web_events_distinct_vals.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.2266822, "relation_name": "FAWDBTCORE.web_events_distinct_vals", "raw_code": "with start_web_events_cleaned as (\n\n    select * from {{ ref('stg_web_events') }}\n),\n\nweb_events_distinct_vals as (\nSELECT\n    'EVENT_ID' AS COLUMN_NAME,\n    COUNT(DISTINCT EVENT_ID) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'EVENT_TYPE' AS COLUMN_NAME,\n    COUNT(DISTINCT EVENT_TYPE) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'EVENT_TIMESTAMP' AS COLUMN_NAME,\n    COUNT(DISTINCT EVENT_TIMESTAMP) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'USER_ID' AS COLUMN_NAME,\n    COUNT(DISTINCT USER_ID) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'PAGE_URL' AS COLUMN_NAME,\n    COUNT(DISTINCT PAGE_URL) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'BROWSER' AS COLUMN_NAME,\n    COUNT(DISTINCT BROWSER) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'DEVICE_TYPE' AS COLUMN_NAME,\n    COUNT(DISTINCT DEVICE_TYPE) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'COUNTRY' AS COLUMN_NAME,\n    COUNT(DISTINCT COUNTRY) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'DURATION_SECONDS' AS COLUMN_NAME,\n    COUNT(DISTINCT DURATION_SECONDS) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'CONVERSION_STATUS' AS COLUMN_NAME,\n    COUNT(DISTINCT CONVERSION_STATUS) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'CREATED_AT' AS COLUMN_NAME,\n    COUNT(DISTINCT CREATED_AT) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\n-- UNION ALL\n\n-- SELECT\n--     'SESSION_ID' AS COLUMN_NAME,\n--     COUNT(DISTINCT SESSION_ID) AS DISTINCT_COUNT\n-- FROM\n--     start_web_events_cleaned\n\n-- UNION ALL\n\n-- SELECT\n--     'PAGE_TITLE' AS COLUMN_NAME,\n--     COUNT(DISTINCT PAGE_TITLE) AS DISTINCT_COUNT\n-- FROM\n--     start_mobile_events_cleaned\n\n)\n\nselect * from web_events_distinct_vals", "language": "sql", "refs": [{"name": "stg_web_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.stg_web_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/web_events_distinct_vals.sql", "compiled": true, "compiled_code": "with start_web_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_web_events\n),\n\nweb_events_distinct_vals as (\nSELECT\n    'EVENT_ID' AS COLUMN_NAME,\n    COUNT(DISTINCT EVENT_ID) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'EVENT_TYPE' AS COLUMN_NAME,\n    COUNT(DISTINCT EVENT_TYPE) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'EVENT_TIMESTAMP' AS COLUMN_NAME,\n    COUNT(DISTINCT EVENT_TIMESTAMP) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'USER_ID' AS COLUMN_NAME,\n    COUNT(DISTINCT USER_ID) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'PAGE_URL' AS COLUMN_NAME,\n    COUNT(DISTINCT PAGE_URL) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'BROWSER' AS COLUMN_NAME,\n    COUNT(DISTINCT BROWSER) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'DEVICE_TYPE' AS COLUMN_NAME,\n    COUNT(DISTINCT DEVICE_TYPE) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'COUNTRY' AS COLUMN_NAME,\n    COUNT(DISTINCT COUNTRY) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'DURATION_SECONDS' AS COLUMN_NAME,\n    COUNT(DISTINCT DURATION_SECONDS) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'CONVERSION_STATUS' AS COLUMN_NAME,\n    COUNT(DISTINCT CONVERSION_STATUS) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\nUNION ALL\n\nSELECT\n    'CREATED_AT' AS COLUMN_NAME,\n    COUNT(DISTINCT CREATED_AT) AS DISTINCT_COUNT\nFROM\n    start_web_events_cleaned\n\n-- UNION ALL\n\n-- SELECT\n--     'SESSION_ID' AS COLUMN_NAME,\n--     COUNT(DISTINCT SESSION_ID) AS DISTINCT_COUNT\n-- FROM\n--     start_web_events_cleaned\n\n-- UNION ALL\n\n-- SELECT\n--     'PAGE_TITLE' AS COLUMN_NAME,\n--     COUNT(DISTINCT PAGE_TITLE) AS DISTINCT_COUNT\n-- FROM\n--     start_mobile_events_cleaned\n\n)\n\nselect * from web_events_distinct_vals", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.web_events_max_min_vals": {"database": "None", "schema": "FAWDBTCORE", "name": "web_events_max_min_vals", "resource_type": "model", "package_name": "oracle_dbt", "path": "web_events_max_min_vals.sql", "original_file_path": "models/web_events_max_min_vals.sql", "unique_id": "model.oracle_dbt.web_events_max_min_vals", "fqn": ["oracle_dbt", "web_events_max_min_vals"], "alias": "web_events_max_min_vals", "checksum": {"name": "sha256", "checksum": "133909bd4addef7f149c21562e908a1dbc89c144b6602a73bc91bdbaebd771a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/web_events_max_min_vals.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.2284448, "relation_name": "FAWDBTCORE.web_events_max_min_vals", "raw_code": "with start_web_events_cleaned as (\n\n    select * from {{ ref('stg_web_events') }}\n),\n\nweb_events_max_min_vals as (\nSELECT\n    MIN(EVENT_ID) AS event_id_min,\n    MAX(EVENT_ID) AS event_id_max,\n    MIN(EVENT_TYPE) AS event_type_min,\n    MAX(EVENT_TYPE) AS event_type_max,\n    MIN(EVENT_TIMESTAMP) AS event_timestamp_min,\n    MAX(EVENT_TIMESTAMP) AS event_timestamp_max,\n    MIN(USER_ID) AS user_id_min,\n    MAX(USER_ID) AS user_id_max,\n    MIN(PAGE_URL) AS page_url_min,\n    MAX(PAGE_URL) AS page_url_max,\n    MIN(BROWSER) AS browser_min,\n    MAX(BROWSER) AS browser_max,\n    MIN(DEVICE_TYPE) AS device_type_min,\n    MAX(DEVICE_TYPE) AS device_type_max,\n    MIN(COUNTRY) AS country_min,\n    MAX(COUNTRY) AS country_max,\n    MIN(DURATION_SECONDS) AS duration_seconds_min,\n    MAX(DURATION_SECONDS) AS duration_seconds_max,\n    MIN(CONVERSION_STATUS) AS conversion_status_min,\n    MAX(CONVERSION_STATUS) AS conversion_status_max,\n    MIN(CREATED_AT) AS created_at_min,\n    MAX(CREATED_AT) AS created_at_max\n    -- MIN(SESSION_ID) AS session_id_min,\n    -- MAX(SESSION_ID) AS session_id_max\n    -- MIN(PAGE_TITLE) AS page_title_min,\n    -- MAX(PAGE_TITLE) AS page_title_max\nFROM\n    start_web_events_cleaned\n)\n\nselect * from web_events_max_min_vals", "language": "sql", "refs": [{"name": "stg_web_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.stg_web_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/web_events_max_min_vals.sql", "compiled": true, "compiled_code": "with start_web_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_web_events\n),\n\nweb_events_max_min_vals as (\nSELECT\n    MIN(EVENT_ID) AS event_id_min,\n    MAX(EVENT_ID) AS event_id_max,\n    MIN(EVENT_TYPE) AS event_type_min,\n    MAX(EVENT_TYPE) AS event_type_max,\n    MIN(EVENT_TIMESTAMP) AS event_timestamp_min,\n    MAX(EVENT_TIMESTAMP) AS event_timestamp_max,\n    MIN(USER_ID) AS user_id_min,\n    MAX(USER_ID) AS user_id_max,\n    MIN(PAGE_URL) AS page_url_min,\n    MAX(PAGE_URL) AS page_url_max,\n    MIN(BROWSER) AS browser_min,\n    MAX(BROWSER) AS browser_max,\n    MIN(DEVICE_TYPE) AS device_type_min,\n    MAX(DEVICE_TYPE) AS device_type_max,\n    MIN(COUNTRY) AS country_min,\n    MAX(COUNTRY) AS country_max,\n    MIN(DURATION_SECONDS) AS duration_seconds_min,\n    MAX(DURATION_SECONDS) AS duration_seconds_max,\n    MIN(CONVERSION_STATUS) AS conversion_status_min,\n    MAX(CONVERSION_STATUS) AS conversion_status_max,\n    MIN(CREATED_AT) AS created_at_min,\n    MAX(CREATED_AT) AS created_at_max\n    -- MIN(SESSION_ID) AS session_id_min,\n    -- MAX(SESSION_ID) AS session_id_max\n    -- MIN(PAGE_TITLE) AS page_title_min,\n    -- MAX(PAGE_TITLE) AS page_title_max\nFROM\n    start_web_events_cleaned\n)\n\nselect * from web_events_max_min_vals", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.web_events_null_vals": {"database": "None", "schema": "FAWDBTCORE", "name": "web_events_null_vals", "resource_type": "model", "package_name": "oracle_dbt", "path": "web_events_null_vals.sql", "original_file_path": "models/web_events_null_vals.sql", "unique_id": "model.oracle_dbt.web_events_null_vals", "fqn": ["oracle_dbt", "web_events_null_vals"], "alias": "web_events_null_vals", "checksum": {"name": "sha256", "checksum": "b167e4d6b1fa276d5c1016bb162eea763441cee3b9cbfffe5d8ea8623fe3c0a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/web_events_null_vals.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.230068, "relation_name": "FAWDBTCORE.web_events_null_vals", "raw_code": "with start_web_events_cleaned as (\n\n    select * from {{ ref('stg_web_events') }}\n),\n\nweb_events_null_vals as (\n    \nSELECT \n    COUNT(*) AS total_rows,\n    SUM(CASE WHEN event_id IS NULL THEN 1 ELSE 0 END) AS event_id_null_count,\n    (SUM(CASE WHEN event_id IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS event_id_null_percentage,\n    SUM(CASE WHEN event_type IS NULL THEN 1 ELSE 0 END) AS event_type_null_count,\n    (SUM(CASE WHEN event_type IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS event_type_null_percentage,\n    SUM(CASE WHEN event_timestamp IS NULL THEN 1 ELSE 0 END) AS event_timestamp_null_count,\n    (SUM(CASE WHEN event_timestamp IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS event_timestamp_null_percentage,\n    SUM(CASE WHEN user_id IS NULL THEN 1 ELSE 0 END) AS user_id_null_count,\n    (SUM(CASE WHEN user_id IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS user_id_null_percentage,\n    SUM(CASE WHEN page_url IS NULL THEN 1 ELSE 0 END) AS page_url_null_count,\n    (SUM(CASE WHEN page_url IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS page_url_null_percentage,\n    SUM(CASE WHEN browser IS NULL THEN 1 ELSE 0 END) AS browser_null_count,\n    (SUM(CASE WHEN browser IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS browser_null_percentage,\n    SUM(CASE WHEN device_type IS NULL THEN 1 ELSE 0 END) AS device_type_null_count,\n    (SUM(CASE WHEN device_type IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS device_type_null_percentage,\n    SUM(CASE WHEN country IS NULL THEN 1 ELSE 0 END) AS country_null_count,\n    (SUM(CASE WHEN country IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS country_null_percentage,\n    SUM(CASE WHEN duration_seconds IS NULL THEN 1 ELSE 0 END) AS duration_seconds_null_count,\n    (SUM(CASE WHEN duration_seconds IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS duration_seconds_null_percentage,\n    SUM(CASE WHEN conversion_status IS NULL THEN 1 ELSE 0 END) AS conversion_status_null_count,\n    (SUM(CASE WHEN conversion_status IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS conversion_status_null_percentage,\n    SUM(CASE WHEN created_at IS NULL THEN 1 ELSE 0 END) AS created_at_null_count,\n    (SUM(CASE WHEN created_at IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS created_at_null_percentage\nFROM start_web_events_cleaned\n\n)\n\nselect * from web_events_null_vals", "language": "sql", "refs": [{"name": "stg_web_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.stg_web_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/web_events_null_vals.sql", "compiled": true, "compiled_code": "with start_web_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_web_events\n),\n\nweb_events_null_vals as (\n    \nSELECT \n    COUNT(*) AS total_rows,\n    SUM(CASE WHEN event_id IS NULL THEN 1 ELSE 0 END) AS event_id_null_count,\n    (SUM(CASE WHEN event_id IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS event_id_null_percentage,\n    SUM(CASE WHEN event_type IS NULL THEN 1 ELSE 0 END) AS event_type_null_count,\n    (SUM(CASE WHEN event_type IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS event_type_null_percentage,\n    SUM(CASE WHEN event_timestamp IS NULL THEN 1 ELSE 0 END) AS event_timestamp_null_count,\n    (SUM(CASE WHEN event_timestamp IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS event_timestamp_null_percentage,\n    SUM(CASE WHEN user_id IS NULL THEN 1 ELSE 0 END) AS user_id_null_count,\n    (SUM(CASE WHEN user_id IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS user_id_null_percentage,\n    SUM(CASE WHEN page_url IS NULL THEN 1 ELSE 0 END) AS page_url_null_count,\n    (SUM(CASE WHEN page_url IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS page_url_null_percentage,\n    SUM(CASE WHEN browser IS NULL THEN 1 ELSE 0 END) AS browser_null_count,\n    (SUM(CASE WHEN browser IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS browser_null_percentage,\n    SUM(CASE WHEN device_type IS NULL THEN 1 ELSE 0 END) AS device_type_null_count,\n    (SUM(CASE WHEN device_type IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS device_type_null_percentage,\n    SUM(CASE WHEN country IS NULL THEN 1 ELSE 0 END) AS country_null_count,\n    (SUM(CASE WHEN country IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS country_null_percentage,\n    SUM(CASE WHEN duration_seconds IS NULL THEN 1 ELSE 0 END) AS duration_seconds_null_count,\n    (SUM(CASE WHEN duration_seconds IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS duration_seconds_null_percentage,\n    SUM(CASE WHEN conversion_status IS NULL THEN 1 ELSE 0 END) AS conversion_status_null_count,\n    (SUM(CASE WHEN conversion_status IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS conversion_status_null_percentage,\n    SUM(CASE WHEN created_at IS NULL THEN 1 ELSE 0 END) AS created_at_null_count,\n    (SUM(CASE WHEN created_at IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS created_at_null_percentage\nFROM start_web_events_cleaned\n\n)\n\nselect * from web_events_null_vals", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.stg_web_events": {"database": "None", "schema": "FAWDBTCORE", "name": "stg_web_events", "resource_type": "model", "package_name": "oracle_dbt", "path": "staging/stg_web_events.sql", "original_file_path": "models/staging/stg_web_events.sql", "unique_id": "model.oracle_dbt.stg_web_events", "fqn": ["oracle_dbt", "staging", "stg_web_events"], "alias": "stg_web_events", "checksum": {"name": "sha256", "checksum": "fbdc0ed388e33e89cf49553d93b661e3eea28d8dda4f8124efa6e1ed8dd08f46"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "event_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/staging/stg_web_events.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "event_id"}, "created_at": 1689632368.2316911, "relation_name": "FAWDBTCORE.stg_web_events", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='event_id'\n        )\n}}\n\n\nwith web_events_extracted as (\n\n    SELECT\n  event_id,\n  event_type,\n  event_timestamp,\n  user_id,\n  page_url,\n  browser,\n  device_type,\n  country,\n  duration_seconds,\n  conversion_status,\n  created_at,\n  session_id,\n  page_title\n    FROM {{ source('FAWDBTCORE', 'web_events') }}\n),\n\nweb_events_cleaned as (\n    SELECT DISTINCT *\n    FROM web_events_extracted\n)\n\nselect * from web_events_cleaned\n\n{% if is_incremental() %}\n\n  -- this filter will only be applied on an incremental run\nwhere created_at >= (select max(created_at) from {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["FAWDBTCORE", "web_events"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.oracle_dbt.FAWDBTCORE.web_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/staging/stg_web_events.sql", "compiled": true, "compiled_code": "\n\n\nwith web_events_extracted as (\n\n    SELECT\n  event_id,\n  event_type,\n  event_timestamp,\n  user_id,\n  page_url,\n  browser,\n  device_type,\n  country,\n  duration_seconds,\n  conversion_status,\n  created_at,\n  session_id,\n  page_title\n    FROM FAWDBTCORE.web_events\n),\n\nweb_events_cleaned as (\n    SELECT DISTINCT *\n    FROM web_events_extracted\n)\n\nselect * from web_events_cleaned\n\n\n\n  -- this filter will only be applied on an incremental run\nwhere created_at >= (select max(created_at) from FAWDBTCORE.stg_web_events)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.mobile_events_distinct_vals": {"database": "None", "schema": "FAWDBTCORE", "name": "mobile_events_distinct_vals", "resource_type": "model", "package_name": "oracle_dbt", "path": "mobile_events_distinct_vals.sql", "original_file_path": "models/mobile_events_distinct_vals.sql", "unique_id": "model.oracle_dbt.mobile_events_distinct_vals", "fqn": ["oracle_dbt", "mobile_events_distinct_vals"], "alias": "mobile_events_distinct_vals", "checksum": {"name": "sha256", "checksum": "562514acc8b0ad31e491209e661052401f84fc9ae952ffee88c1fec02c672c29"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/mobile_events_distinct_vals.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.234974, "relation_name": "FAWDBTCORE.mobile_events_distinct_vals", "raw_code": "with start_mobile_events_cleaned as (\n\n    select * from {{ ref('stg_mobile_events') }}\n),\n\nmobile_events_distinct_vals as (\nSELECT\n    'EVENT_ID' AS COLUMN_NAME,\n    COUNT(DISTINCT EVENT_ID) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'EVENT_TYPE' AS COLUMN_NAME,\n    COUNT(DISTINCT EVENT_TYPE) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'EVENT_TIMESTAMP' AS COLUMN_NAME,\n    COUNT(DISTINCT EVENT_TIMESTAMP) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'USER_ID' AS COLUMN_NAME,\n    COUNT(DISTINCT USER_ID) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'APP_NAME' AS COLUMN_NAME,\n    COUNT(DISTINCT APP_NAME) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'OPERATING_SYSTEM' AS COLUMN_NAME,\n    COUNT(DISTINCT OPERATING_SYSTEM) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'COUNTRY' AS COLUMN_NAME,\n    COUNT(DISTINCT COUNTRY) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'DURATION_SECONDS' AS COLUMN_NAME,\n    COUNT(DISTINCT DURATION_SECONDS) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'CONVERSION_STATUS' AS COLUMN_NAME,\n    COUNT(DISTINCT CONVERSION_STATUS) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'CREATED_AT' AS COLUMN_NAME,\n    COUNT(DISTINCT CREATED_AT) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\n-- UNION ALL\n\n-- SELECT\n--     'SESSION_ID' AS COLUMN_NAME,\n--     COUNT(DISTINCT SESSION_ID) AS DISTINCT_COUNT\n-- FROM\n--     start_mobile_events_cleaned\n\n-- UNION ALL\n\n-- SELECT\n--     'SCREEN_RESOLUTION' AS COLUMN_NAME,\n--     COUNT(DISTINCT SCREEN_RESOLUTION) AS DISTINCT_COUNT\n-- FROM\n--     start_mobile_events_cleaned\n\n)\n\nselect * from mobile_events_distinct_vals", "language": "sql", "refs": [{"name": "stg_mobile_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.stg_mobile_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/mobile_events_distinct_vals.sql", "compiled": true, "compiled_code": "with start_mobile_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_mobile_events\n),\n\nmobile_events_distinct_vals as (\nSELECT\n    'EVENT_ID' AS COLUMN_NAME,\n    COUNT(DISTINCT EVENT_ID) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'EVENT_TYPE' AS COLUMN_NAME,\n    COUNT(DISTINCT EVENT_TYPE) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'EVENT_TIMESTAMP' AS COLUMN_NAME,\n    COUNT(DISTINCT EVENT_TIMESTAMP) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'USER_ID' AS COLUMN_NAME,\n    COUNT(DISTINCT USER_ID) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'APP_NAME' AS COLUMN_NAME,\n    COUNT(DISTINCT APP_NAME) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'OPERATING_SYSTEM' AS COLUMN_NAME,\n    COUNT(DISTINCT OPERATING_SYSTEM) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'COUNTRY' AS COLUMN_NAME,\n    COUNT(DISTINCT COUNTRY) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'DURATION_SECONDS' AS COLUMN_NAME,\n    COUNT(DISTINCT DURATION_SECONDS) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'CONVERSION_STATUS' AS COLUMN_NAME,\n    COUNT(DISTINCT CONVERSION_STATUS) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\nUNION ALL\n\nSELECT\n    'CREATED_AT' AS COLUMN_NAME,\n    COUNT(DISTINCT CREATED_AT) AS DISTINCT_COUNT\nFROM\n    start_mobile_events_cleaned\n\n-- UNION ALL\n\n-- SELECT\n--     'SESSION_ID' AS COLUMN_NAME,\n--     COUNT(DISTINCT SESSION_ID) AS DISTINCT_COUNT\n-- FROM\n--     start_mobile_events_cleaned\n\n-- UNION ALL\n\n-- SELECT\n--     'SCREEN_RESOLUTION' AS COLUMN_NAME,\n--     COUNT(DISTINCT SCREEN_RESOLUTION) AS DISTINCT_COUNT\n-- FROM\n--     start_mobile_events_cleaned\n\n)\n\nselect * from mobile_events_distinct_vals", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.mobile_events_max_min_vals": {"database": "None", "schema": "FAWDBTCORE", "name": "mobile_events_max_min_vals", "resource_type": "model", "package_name": "oracle_dbt", "path": "mobile_events_max_min_vals.sql", "original_file_path": "models/mobile_events_max_min_vals.sql", "unique_id": "model.oracle_dbt.mobile_events_max_min_vals", "fqn": ["oracle_dbt", "mobile_events_max_min_vals"], "alias": "mobile_events_max_min_vals", "checksum": {"name": "sha256", "checksum": "650157a1ba7af40cd0982bdda9d1976775f70fa7a4b8863b0f06a04e2056fef6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/mobile_events_max_min_vals.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.236717, "relation_name": "FAWDBTCORE.mobile_events_max_min_vals", "raw_code": "with start_mobile_events_cleaned as (\n\n    select * from {{ ref('stg_mobile_events') }}\n),\n\nmobile_events_max_min_vals as (\nSELECT\n    MIN(EVENT_ID) AS event_id_min,\n    MAX(EVENT_ID) AS event_id_max,\n    MIN(EVENT_TYPE) AS event_type_min,\n    MAX(EVENT_TYPE) AS event_type_max,\n    MIN(EVENT_TIMESTAMP) AS event_timestamp_min,\n    MAX(EVENT_TIMESTAMP) AS event_timestamp_max,\n    MIN(USER_ID) AS user_id_min,\n    MAX(USER_ID) AS user_id_max,\n    MIN(APP_NAME) AS app_name_min,\n    MAX(APP_NAME) AS app_name_max,\n    MIN(OPERATING_SYSTEM) AS operating_system_min,\n    MAX(OPERATING_SYSTEM) AS operating_system_max,\n    MIN(COUNTRY) AS country_min,\n    MAX(COUNTRY) AS country_max,\n    MIN(DURATION_SECONDS) AS duration_seconds_min,\n    MAX(DURATION_SECONDS) AS duration_seconds_max,\n    MIN(CONVERSION_STATUS) AS conversion_status_min,\n    MAX(CONVERSION_STATUS) AS conversion_status_max,\n    MIN(CREATED_AT) AS created_at_min,\n    MAX(CREATED_AT) AS created_at_max\n    -- MIN(SESSION_ID) AS session_id_min,\n    -- MAX(SESSION_ID) AS session_id_max\n    -- MIN(SCREEN_RESOLUTION) AS screen_resolution_min,\n    -- MAX(SCREEN_RESOLUTION) AS screen_resolution_max\nFROM\n    start_mobile_events_cleaned\n)\n\nselect * from mobile_events_max_min_vals", "language": "sql", "refs": [{"name": "stg_mobile_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.stg_mobile_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/mobile_events_max_min_vals.sql", "compiled": true, "compiled_code": "with start_mobile_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_mobile_events\n),\n\nmobile_events_max_min_vals as (\nSELECT\n    MIN(EVENT_ID) AS event_id_min,\n    MAX(EVENT_ID) AS event_id_max,\n    MIN(EVENT_TYPE) AS event_type_min,\n    MAX(EVENT_TYPE) AS event_type_max,\n    MIN(EVENT_TIMESTAMP) AS event_timestamp_min,\n    MAX(EVENT_TIMESTAMP) AS event_timestamp_max,\n    MIN(USER_ID) AS user_id_min,\n    MAX(USER_ID) AS user_id_max,\n    MIN(APP_NAME) AS app_name_min,\n    MAX(APP_NAME) AS app_name_max,\n    MIN(OPERATING_SYSTEM) AS operating_system_min,\n    MAX(OPERATING_SYSTEM) AS operating_system_max,\n    MIN(COUNTRY) AS country_min,\n    MAX(COUNTRY) AS country_max,\n    MIN(DURATION_SECONDS) AS duration_seconds_min,\n    MAX(DURATION_SECONDS) AS duration_seconds_max,\n    MIN(CONVERSION_STATUS) AS conversion_status_min,\n    MAX(CONVERSION_STATUS) AS conversion_status_max,\n    MIN(CREATED_AT) AS created_at_min,\n    MAX(CREATED_AT) AS created_at_max\n    -- MIN(SESSION_ID) AS session_id_min,\n    -- MAX(SESSION_ID) AS session_id_max\n    -- MIN(SCREEN_RESOLUTION) AS screen_resolution_min,\n    -- MAX(SCREEN_RESOLUTION) AS screen_resolution_max\nFROM\n    start_mobile_events_cleaned\n)\n\nselect * from mobile_events_max_min_vals", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.mobile_events_null_vals": {"database": "None", "schema": "FAWDBTCORE", "name": "mobile_events_null_vals", "resource_type": "model", "package_name": "oracle_dbt", "path": "mobile_events_null_vals.sql", "original_file_path": "models/mobile_events_null_vals.sql", "unique_id": "model.oracle_dbt.mobile_events_null_vals", "fqn": ["oracle_dbt", "mobile_events_null_vals"], "alias": "mobile_events_null_vals", "checksum": {"name": "sha256", "checksum": "e66eae0bb9062b54b23d2e0e1f3848a9ad66308a68034c2e5a7cbe642e4ff636"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/mobile_events_null_vals.sql", "deferred": false, "unrendered_config": {}, "created_at": 1689632368.2382898, "relation_name": "FAWDBTCORE.mobile_events_null_vals", "raw_code": "with start_mobile_events_cleaned as (\n\n    select * from {{ ref('stg_mobile_events') }}\n),\n\nmobile_events_null_vals as (\n    \nSELECT \n    COUNT(*) AS total_rows,\n    SUM(CASE WHEN EVENT_ID IS NULL THEN 1 ELSE 0 END) AS event_id_null_count,\n    (SUM(CASE WHEN EVENT_ID IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS event_id_null_percentage,\n    SUM(CASE WHEN EVENT_TYPE IS NULL THEN 1 ELSE 0 END) AS event_type_null_count,\n    (SUM(CASE WHEN EVENT_TYPE IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS event_type_null_percentage,\n    SUM(CASE WHEN EVENT_TIMESTAMP IS NULL THEN 1 ELSE 0 END) AS event_timestamp_null_count,\n    (SUM(CASE WHEN EVENT_TIMESTAMP IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS event_timestamp_null_percentage,\n    SUM(CASE WHEN USER_ID IS NULL THEN 1 ELSE 0 END) AS user_id_null_count,\n    (SUM(CASE WHEN USER_ID IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS user_id_null_percentage,\n    SUM(CASE WHEN APP_NAME IS NULL THEN 1 ELSE 0 END) AS app_name_null_count,\n    (SUM(CASE WHEN APP_NAME IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS app_name_null_percentage,\n    SUM(CASE WHEN OPERATING_SYSTEM IS NULL THEN 1 ELSE 0 END) AS operating_system_null_count,\n    (SUM(CASE WHEN OPERATING_SYSTEM IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS operating_system_null_percentage,\n    SUM(CASE WHEN COUNTRY IS NULL THEN 1 ELSE 0 END) AS country_null_count,\n    (SUM(CASE WHEN COUNTRY IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS country_null_percentage,\n    SUM(CASE WHEN DURATION_SECONDS IS NULL THEN 1 ELSE 0 END) AS duration_seconds_null_count,\n    (SUM(CASE WHEN DURATION_SECONDS IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS duration_seconds_null_percentage,\n    SUM(CASE WHEN CONVERSION_STATUS IS NULL THEN 1 ELSE 0 END) AS conversion_status_null_count,\n    (SUM(CASE WHEN CONVERSION_STATUS IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS conversion_status_null_percentage,\n    SUM(CASE WHEN CREATED_AT IS NULL THEN 1 ELSE 0 END) AS created_at_null_count,\n    (SUM(CASE WHEN CREATED_AT IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS created_at_null_percentage\n    -- SUM(CASE WHEN SESSION_ID IS NULL THEN 1 ELSE 0 END) AS session_id_null_count,\n    -- (SUM(CASE WHEN SESSION_ID IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS session_id_null_percentage,\n    -- SUM(CASE WHEN SCREEN_RESOLUTION IS NULL THEN 1 ELSE 0 END) AS screen_resolution_null_count,\n    -- (SUM(CASE WHEN SCREEN_RESOLUTION IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS screen_resolution_null_percentage\nFROM start_mobile_events_cleaned\n\n)\n\nselect * from mobile_events_null_vals", "language": "sql", "refs": [{"name": "stg_mobile_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.oracle_dbt.stg_mobile_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/mobile_events_null_vals.sql", "compiled": true, "compiled_code": "with start_mobile_events_cleaned as (\n\n    select * from FAWDBTCORE.stg_mobile_events\n),\n\nmobile_events_null_vals as (\n    \nSELECT \n    COUNT(*) AS total_rows,\n    SUM(CASE WHEN EVENT_ID IS NULL THEN 1 ELSE 0 END) AS event_id_null_count,\n    (SUM(CASE WHEN EVENT_ID IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS event_id_null_percentage,\n    SUM(CASE WHEN EVENT_TYPE IS NULL THEN 1 ELSE 0 END) AS event_type_null_count,\n    (SUM(CASE WHEN EVENT_TYPE IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS event_type_null_percentage,\n    SUM(CASE WHEN EVENT_TIMESTAMP IS NULL THEN 1 ELSE 0 END) AS event_timestamp_null_count,\n    (SUM(CASE WHEN EVENT_TIMESTAMP IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS event_timestamp_null_percentage,\n    SUM(CASE WHEN USER_ID IS NULL THEN 1 ELSE 0 END) AS user_id_null_count,\n    (SUM(CASE WHEN USER_ID IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS user_id_null_percentage,\n    SUM(CASE WHEN APP_NAME IS NULL THEN 1 ELSE 0 END) AS app_name_null_count,\n    (SUM(CASE WHEN APP_NAME IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS app_name_null_percentage,\n    SUM(CASE WHEN OPERATING_SYSTEM IS NULL THEN 1 ELSE 0 END) AS operating_system_null_count,\n    (SUM(CASE WHEN OPERATING_SYSTEM IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS operating_system_null_percentage,\n    SUM(CASE WHEN COUNTRY IS NULL THEN 1 ELSE 0 END) AS country_null_count,\n    (SUM(CASE WHEN COUNTRY IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS country_null_percentage,\n    SUM(CASE WHEN DURATION_SECONDS IS NULL THEN 1 ELSE 0 END) AS duration_seconds_null_count,\n    (SUM(CASE WHEN DURATION_SECONDS IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS duration_seconds_null_percentage,\n    SUM(CASE WHEN CONVERSION_STATUS IS NULL THEN 1 ELSE 0 END) AS conversion_status_null_count,\n    (SUM(CASE WHEN CONVERSION_STATUS IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS conversion_status_null_percentage,\n    SUM(CASE WHEN CREATED_AT IS NULL THEN 1 ELSE 0 END) AS created_at_null_count,\n    (SUM(CASE WHEN CREATED_AT IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS created_at_null_percentage\n    -- SUM(CASE WHEN SESSION_ID IS NULL THEN 1 ELSE 0 END) AS session_id_null_count,\n    -- (SUM(CASE WHEN SESSION_ID IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS session_id_null_percentage,\n    -- SUM(CASE WHEN SCREEN_RESOLUTION IS NULL THEN 1 ELSE 0 END) AS screen_resolution_null_count,\n    -- (SUM(CASE WHEN SCREEN_RESOLUTION IS NULL THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS screen_resolution_null_percentage\nFROM start_mobile_events_cleaned\n\n)\n\nselect * from mobile_events_null_vals", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.stg_mobile_events": {"database": "None", "schema": "FAWDBTCORE", "name": "stg_mobile_events", "resource_type": "model", "package_name": "oracle_dbt", "path": "staging/stg_mobile_events.sql", "original_file_path": "models/staging/stg_mobile_events.sql", "unique_id": "model.oracle_dbt.stg_mobile_events", "fqn": ["oracle_dbt", "staging", "stg_mobile_events"], "alias": "stg_mobile_events", "checksum": {"name": "sha256", "checksum": "0fae1e6493f399cece9034c084021f1a397c206d4c7dc65675c74bfcf8a2d81d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "event_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/staging/stg_mobile_events.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "event_id"}, "created_at": 1689632368.239851, "relation_name": "FAWDBTCORE.stg_mobile_events", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='event_id'\n\n        )\n}}\n\n\nwith mobile_events_extracted as (\n\n SELECT\n  event_id,\n  event_type,\n  event_timestamp,\n  user_id,\n  app_name,\n  operating_system,\n  country,\n  duration_seconds,\n  conversion_status,\n  created_at,\n  session_id,\n  screen_resolution\nFROM {{ source('FAWDBTCORE', 'mobile_events') }}\n),\n\nmobile_events_cleaned as (\n    SELECT DISTINCT *\n    FROM mobile_events_extracted\n)\n\nselect * from mobile_events_cleaned\n\n\n\n{% if is_incremental() %}\n\n  -- this filter will only be applied on an incremental run\nwhere created_at >= (select max(created_at) from {{ this }})\n\n{% endif %}", "language": "sql", "refs": [], "sources": [["FAWDBTCORE", "mobile_events"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.oracle_dbt.FAWDBTCORE.mobile_events"]}, "compiled_path": "target/compiled/oracle_dbt/models/staging/stg_mobile_events.sql", "compiled": true, "compiled_code": "\n\n\nwith mobile_events_extracted as (\n\n SELECT\n  event_id,\n  event_type,\n  event_timestamp,\n  user_id,\n  app_name,\n  operating_system,\n  country,\n  duration_seconds,\n  conversion_status,\n  created_at,\n  session_id,\n  screen_resolution\nFROM FAWDBTCORE.mobile_events\n),\n\nmobile_events_cleaned as (\n    SELECT DISTINCT *\n    FROM mobile_events_extracted\n)\n\nselect * from mobile_events_cleaned\n\n\n\n\n\n  -- this filter will only be applied on an incremental run\nwhere created_at >= (select max(created_at) from FAWDBTCORE.stg_mobile_events)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.regression": {"database": "None", "schema": "FAWDBTCORE", "name": "regression", "resource_type": "model", "package_name": "oracle_dbt", "path": "regression.py", "original_file_path": "models/regression.py", "unique_id": "model.oracle_dbt.regression", "fqn": ["oracle_dbt", "regression"], "alias": "regression", "checksum": {"name": "sha256", "checksum": "28d63a1fc2c2d777fd0de82812764cc9ebe2594d73466fc83d798d1dc9667562"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/regression.py", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689632368.242988, "relation_name": "FAWDBTCORE.regression", "raw_code": "from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import LabelEncoder\n\ndef model(dbt, session):\n    dbt.config(materialized=\"table\")\n\n    s_df = dbt.source(\"FAWDBTCORE\", \"web_order_info\")\n    df = s_df.pull()\n\n    X = df[[\"PRICE\", \"CATEGORY\", \"PAYMENT_TYPE\"]]\n    y = df[\"QUANTITY\"]\n\n    label_encoder = LabelEncoder()\n    X_encoded = X.copy()\n    for feature in [\"CATEGORY\", \"PAYMENT_TYPE\"]:\n        X_encoded[feature] = label_encoder.fit_transform(X[feature])\n\n    X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)\n\n    regressor = LinearRegression()\n    regressor.fit(X_train, y_train)\n\n    y_pred = regressor.predict(X_test)\n    result_df = pd.DataFrame({\"Predicted Quantity\": y_pred, \"Actual Quantity\": y_test})\n    return result_df", "language": "python", "refs": [], "sources": [["FAWDBTCORE", "web_order_info"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_oracle.py_script_postfix"], "nodes": ["source.oracle_dbt.FAWDBTCORE.web_order_info"]}, "compiled_path": "target/compiled/oracle_dbt/models/regression.py", "compiled": true, "compiled_code": "from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import LabelEncoder\n\ndef model(dbt, session):\n    dbt.config(materialized=\"table\")\n\n    s_df = dbt.source(\"FAWDBTCORE\", \"web_order_info\")\n    df = s_df.pull()\n\n    X = df[[\"PRICE\", \"CATEGORY\", \"PAYMENT_TYPE\"]]\n    y = df[\"QUANTITY\"]\n\n    label_encoder = LabelEncoder()\n    X_encoded = X.copy()\n    for feature in [\"CATEGORY\", \"PAYMENT_TYPE\"]:\n        X_encoded[feature] = label_encoder.fit_transform(X[feature])\n\n    X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)\n\n    regressor = LinearRegression()\n    regressor.fit(X_train, y_train)\n\n    y_pred = regressor.predict(X_test)\n    result_df = pd.DataFrame({\"Predicted Quantity\": y_pred, \"Actual Quantity\": y_test})\n    return result_df\n\n\ndef main():\n    import oml\n    import pandas as pd\n    def ref(*args, **kwargs):\n        refs = {}\n        key = \".\".join(args)\n        version = kwargs.get(\"v\") or kwargs.get(\"version\")\n        if version:\n            key += f\".v{version}\"\n        schema, table = refs[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    def source(*args, dbt_load_df_function):\n        sources = {\"FAWDBTCORE.web_order_info\": \"FAWDBTCORE.web_order_info\"}\n        key = \".\".join(args)\n        schema, table = sources[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    config_dict = {}\n\n\n    class config:\n        def __init__(self, *args, **kwargs):\n            pass\n\n        @staticmethod\n        def get(key, default=None):\n            return config_dict.get(key, default)\n\n    class this:\n        \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n        database = \"None\"\n        schema = \"FAWDBTCORE\"\n        identifier = \"regression\"\n        def __repr__(self):\n            return \"FAWDBTCORE.regression\"\n\n\n    class dbtObj:\n        def __init__(self, load_df_function) -> None:\n            self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n            self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n            self.config = config\n            self.this = this()\n            self.is_incremental = False\n\n    from sklearn.model_selection import train_test_split\n    from sklearn.linear_model import LinearRegression\n    from sklearn.preprocessing import LabelEncoder\n    \n    def model(dbt, session):\n        dbt.config(materialized=\"table\")\n    \n        s_df = dbt.source(\"FAWDBTCORE\", \"web_order_info\")\n        df = s_df.pull()\n    \n        X = df[[\"PRICE\", \"CATEGORY\", \"PAYMENT_TYPE\"]]\n        y = df[\"QUANTITY\"]\n    \n        label_encoder = LabelEncoder()\n        X_encoded = X.copy()\n        for feature in [\"CATEGORY\", \"PAYMENT_TYPE\"]:\n            X_encoded[feature] = label_encoder.fit_transform(X[feature])\n    \n        X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)\n    \n        regressor = LinearRegression()\n        regressor.fit(X_train, y_train)\n    \n        y_pred = regressor.predict(X_test)\n        result_df = pd.DataFrame({\"Predicted Quantity\": y_pred, \"Actual Quantity\": y_test})\n        return result_df\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.max_product_revenue": {"database": "None", "schema": "FAWDBTCORE", "name": "max_product_revenue", "resource_type": "model", "package_name": "oracle_dbt", "path": "max_product_revenue.py", "original_file_path": "models/max_product_revenue.py", "unique_id": "model.oracle_dbt.max_product_revenue", "fqn": ["oracle_dbt", "max_product_revenue"], "alias": "max_product_revenue", "checksum": {"name": "sha256", "checksum": "2dfa347bc0a6baa72f799fc5f59aa381f9f1f3311a7cb2bd8a20a7e02ba2dc15"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/max_product_revenue.py", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689632368.2453089, "relation_name": "FAWDBTCORE.max_product_revenue", "raw_code": "def model(dbt, session):\n    dbt.config(materialized=\"table\")\n    s_df = dbt.ref(\"stg_web_order_info\")\n    total_revenue = (s_df[\"PRICE\"] * s_df[\"QUANTITY\"]).sum()\n    cr = session.cursor()\n    _ = cr.execute(\"SELECT MAX(price) FROM stg_web_order_info\")\n    max_price = cr.fetchone()[0]\n\n    most_expensive_product_orders = s_df[s_df[\"PRICE\"] == max_price]\n    most_expensive_product_revenue = (most_expensive_product_orders[\"PRICE\"] * most_expensive_product_orders[\"QUANTITY\"]).sum()\n    most_expensive_product_revenue_df = pd.DataFrame([most_expensive_product_revenue], columns=[\"REVENUE\"])\n\n    return most_expensive_product_revenue_df", "language": "python", "refs": [{"name": "stg_web_order_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_oracle.py_script_postfix"], "nodes": ["model.oracle_dbt.stg_web_order_info"]}, "compiled_path": "target/compiled/oracle_dbt/models/max_product_revenue.py", "compiled": true, "compiled_code": "def model(dbt, session):\n    dbt.config(materialized=\"table\")\n    s_df = dbt.ref(\"stg_web_order_info\")\n    total_revenue = (s_df[\"PRICE\"] * s_df[\"QUANTITY\"]).sum()\n    cr = session.cursor()\n    _ = cr.execute(\"SELECT MAX(price) FROM stg_web_order_info\")\n    max_price = cr.fetchone()[0]\n\n    most_expensive_product_orders = s_df[s_df[\"PRICE\"] == max_price]\n    most_expensive_product_revenue = (most_expensive_product_orders[\"PRICE\"] * most_expensive_product_orders[\"QUANTITY\"]).sum()\n    most_expensive_product_revenue_df = pd.DataFrame([most_expensive_product_revenue], columns=[\"REVENUE\"])\n\n    return most_expensive_product_revenue_df\n\n\ndef main():\n    import oml\n    import pandas as pd\n    def ref(*args, **kwargs):\n        refs = {\"stg_web_order_info\": \"FAWDBTCORE.stg_web_order_info\"}\n        key = \".\".join(args)\n        version = kwargs.get(\"v\") or kwargs.get(\"version\")\n        if version:\n            key += f\".v{version}\"\n        schema, table = refs[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    def source(*args, dbt_load_df_function):\n        sources = {}\n        key = \".\".join(args)\n        schema, table = sources[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    config_dict = {}\n\n\n    class config:\n        def __init__(self, *args, **kwargs):\n            pass\n\n        @staticmethod\n        def get(key, default=None):\n            return config_dict.get(key, default)\n\n    class this:\n        \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n        database = \"None\"\n        schema = \"FAWDBTCORE\"\n        identifier = \"max_product_revenue\"\n        def __repr__(self):\n            return \"FAWDBTCORE.max_product_revenue\"\n\n\n    class dbtObj:\n        def __init__(self, load_df_function) -> None:\n            self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n            self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n            self.config = config\n            self.this = this()\n            self.is_incremental = False\n\n    def model(dbt, session):\n        dbt.config(materialized=\"table\")\n        s_df = dbt.ref(\"stg_web_order_info\")\n        total_revenue = (s_df[\"PRICE\"] * s_df[\"QUANTITY\"]).sum()\n        cr = session.cursor()\n        _ = cr.execute(\"SELECT MAX(price) FROM stg_web_order_info\")\n        max_price = cr.fetchone()[0]\n    \n        most_expensive_product_orders = s_df[s_df[\"PRICE\"] == max_price]\n        most_expensive_product_revenue = (most_expensive_product_orders[\"PRICE\"] * most_expensive_product_orders[\"QUANTITY\"]).sum()\n        most_expensive_product_revenue_df = pd.DataFrame([most_expensive_product_revenue], columns=[\"REVENUE\"])\n    \n        return most_expensive_product_revenue_df\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.web_events_python": {"database": "None", "schema": "FAWDBTCORE", "name": "web_events_python", "resource_type": "model", "package_name": "oracle_dbt", "path": "web_events_python.py", "original_file_path": "models/web_events_python.py", "unique_id": "model.oracle_dbt.web_events_python", "fqn": ["oracle_dbt", "web_events_python"], "alias": "web_events_python", "checksum": {"name": "sha256", "checksum": "f8c516bdb251c545f33bd1e6f5168616e11a73ceaf6456974f26785fef7dd612"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "async_flag": true, "timeout": 1800, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/web_events_python.py", "deferred": false, "unrendered_config": {"materialized": "table", "async_flag": true, "timeout": 1800}, "created_at": 1689632368.247458, "relation_name": "FAWDBTCORE.web_events_python", "raw_code": "from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier\ndef model(dbt, session):\n\n    dbt.config(materialized=\"table\")\n    dbt.config(async_flag=True)  # run the python function in async mode\n    dbt.config(timeout=1800)  # timeout of 30 minutes\n    s_df = dbt.ref( \"stg_web_order_info\")\n    df = s_df.pull()\n\n    x = df[[\"ORDER_ID\", \"PRODUCT_ID\", \"PRICE\" , \"QUANTITY\", \"CUSTOMER_ID\"]]  \n    y = df[\"SHIPPING_CITY\"]  \n\n    label_encoder = LabelEncoder()\n    y_encoded = label_encoder.fit_transform(y)\n\n    X_train, X_test, y_train, y_test = train_test_split(x, y_encoded, test_size=0.2, random_state=42)\n    classifier = DecisionTreeClassifier()\n    classifier.fit(X_train, y_train)\n\n    y_pred = classifier.predict(x)\n\n    y_pred_decoded = label_encoder.inverse_transform(y_pred)\n\n    accuracy = classifier.score(X_test, y_test)\n    #res_df  = pd.DataFrame(data={\"Shipping_City_Prediction\": y_pred_decoded, \"Shipping_City_actual\": label_encoder.inverse_transform(y_test)})\n    df[\"Shipping_City_Prediction\"] = y_pred_decoded\n    \n    return df", "language": "python", "refs": [{"name": "stg_web_order_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_oracle.py_script_postfix"], "nodes": ["model.oracle_dbt.stg_web_order_info"]}, "compiled_path": "target/compiled/oracle_dbt/models/web_events_python.py", "compiled": true, "compiled_code": "from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeClassifier\ndef model(dbt, session):\n\n    dbt.config(materialized=\"table\")\n    dbt.config(async_flag=True)  # run the python function in async mode\n    dbt.config(timeout=1800)  # timeout of 30 minutes\n    s_df = dbt.ref( \"stg_web_order_info\")\n    df = s_df.pull()\n\n    x = df[[\"ORDER_ID\", \"PRODUCT_ID\", \"PRICE\" , \"QUANTITY\", \"CUSTOMER_ID\"]]  \n    y = df[\"SHIPPING_CITY\"]  \n\n    label_encoder = LabelEncoder()\n    y_encoded = label_encoder.fit_transform(y)\n\n    X_train, X_test, y_train, y_test = train_test_split(x, y_encoded, test_size=0.2, random_state=42)\n    classifier = DecisionTreeClassifier()\n    classifier.fit(X_train, y_train)\n\n    y_pred = classifier.predict(x)\n\n    y_pred_decoded = label_encoder.inverse_transform(y_pred)\n\n    accuracy = classifier.score(X_test, y_test)\n    #res_df  = pd.DataFrame(data={\"Shipping_City_Prediction\": y_pred_decoded, \"Shipping_City_actual\": label_encoder.inverse_transform(y_test)})\n    df[\"Shipping_City_Prediction\"] = y_pred_decoded\n    \n    return df\n\n\ndef main():\n    import oml\n    import pandas as pd\n    def ref(*args, **kwargs):\n        refs = {\"stg_web_order_info\": \"FAWDBTCORE.stg_web_order_info\"}\n        key = \".\".join(args)\n        version = kwargs.get(\"v\") or kwargs.get(\"version\")\n        if version:\n            key += f\".v{version}\"\n        schema, table = refs[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    def source(*args, dbt_load_df_function):\n        sources = {}\n        key = \".\".join(args)\n        schema, table = sources[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    config_dict = {}\n\n\n    class config:\n        def __init__(self, *args, **kwargs):\n            pass\n\n        @staticmethod\n        def get(key, default=None):\n            return config_dict.get(key, default)\n\n    class this:\n        \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n        database = \"None\"\n        schema = \"FAWDBTCORE\"\n        identifier = \"web_events_python\"\n        def __repr__(self):\n            return \"FAWDBTCORE.web_events_python\"\n\n\n    class dbtObj:\n        def __init__(self, load_df_function) -> None:\n            self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n            self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n            self.config = config\n            self.this = this()\n            self.is_incremental = False\n\n    from sklearn.model_selection import train_test_split\n    from sklearn.preprocessing import LabelEncoder\n    from sklearn.tree import DecisionTreeClassifier\n    def model(dbt, session):\n    \n        dbt.config(materialized=\"table\")\n        dbt.config(async_flag=True)  # run the python function in async mode\n        dbt.config(timeout=1800)  # timeout of 30 minutes\n        s_df = dbt.ref( \"stg_web_order_info\")\n        df = s_df.pull()\n    \n        x = df[[\"ORDER_ID\", \"PRODUCT_ID\", \"PRICE\" , \"QUANTITY\", \"CUSTOMER_ID\"]]  \n        y = df[\"SHIPPING_CITY\"]  \n    \n        label_encoder = LabelEncoder()\n        y_encoded = label_encoder.fit_transform(y)\n    \n        X_train, X_test, y_train, y_test = train_test_split(x, y_encoded, test_size=0.2, random_state=42)\n        classifier = DecisionTreeClassifier()\n        classifier.fit(X_train, y_train)\n    \n        y_pred = classifier.predict(x)\n    \n        y_pred_decoded = label_encoder.inverse_transform(y_pred)\n    \n        accuracy = classifier.score(X_test, y_test)\n        #res_df  = pd.DataFrame(data={\"Shipping_City_Prediction\": y_pred_decoded, \"Shipping_City_actual\": label_encoder.inverse_transform(y_test)})\n        df[\"Shipping_City_Prediction\"] = y_pred_decoded\n        \n        return df\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.stg_web_order_info": {"database": "None", "schema": "FAWDBTCORE", "name": "stg_web_order_info", "resource_type": "model", "package_name": "oracle_dbt", "path": "staging/stg_web_order_info.py", "original_file_path": "models/staging/stg_web_order_info.py", "unique_id": "model.oracle_dbt.stg_web_order_info", "fqn": ["oracle_dbt", "staging", "stg_web_order_info"], "alias": "stg_web_order_info", "checksum": {"name": "sha256", "checksum": "a72d3f6dd233aec2bfeb490400a259e0ed3d4712f7ffdb62e08cd016555862d8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/staging/stg_web_order_info.py", "deferred": false, "unrendered_config": {"materialized": "incremental"}, "created_at": 1689632368.249748, "relation_name": "FAWDBTCORE.stg_web_order_info", "raw_code": "def model(dbt, session):\n\n    dbt.config(materialized=\"incremental\")\n\n    s_df = dbt.source(\"FAWDBTCORE\", \"web_order_info\")\n\n    df = s_df.pull()\n\n    return df", "language": "python", "refs": [], "sources": [["FAWDBTCORE", "web_order_info"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_oracle.py_script_postfix"], "nodes": ["source.oracle_dbt.FAWDBTCORE.web_order_info"]}, "compiled_path": "target/compiled/oracle_dbt/models/staging/stg_web_order_info.py", "compiled": true, "compiled_code": "def model(dbt, session):\n\n    dbt.config(materialized=\"incremental\")\n\n    s_df = dbt.source(\"FAWDBTCORE\", \"web_order_info\")\n\n    df = s_df.pull()\n\n    return df\n\n\ndef main():\n    import oml\n    import pandas as pd\n    def ref(*args, **kwargs):\n        refs = {}\n        key = \".\".join(args)\n        version = kwargs.get(\"v\") or kwargs.get(\"version\")\n        if version:\n            key += f\".v{version}\"\n        schema, table = refs[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    def source(*args, dbt_load_df_function):\n        sources = {\"FAWDBTCORE.web_order_info\": \"FAWDBTCORE.web_order_info\"}\n        key = \".\".join(args)\n        schema, table = sources[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    config_dict = {}\n\n\n    class config:\n        def __init__(self, *args, **kwargs):\n            pass\n\n        @staticmethod\n        def get(key, default=None):\n            return config_dict.get(key, default)\n\n    class this:\n        \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n        database = \"None\"\n        schema = \"FAWDBTCORE\"\n        identifier = \"stg_web_order_info\"\n        def __repr__(self):\n            return \"FAWDBTCORE.stg_web_order_info\"\n\n\n    class dbtObj:\n        def __init__(self, load_df_function) -> None:\n            self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n            self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n            self.config = config\n            self.this = this()\n            self.is_incremental = True\n\n    def model(dbt, session):\n    \n        dbt.config(materialized=\"incremental\")\n    \n        s_df = dbt.source(\"FAWDBTCORE\", \"web_order_info\")\n    \n        df = s_df.pull()\n    \n        return df\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.oracle_dbt.highest_user_id": {"database": "None", "schema": "FAWDBTCORE", "name": "highest_user_id", "resource_type": "model", "package_name": "oracle_dbt", "path": "highest_user_id.py", "original_file_path": "models/highest_user_id.py", "unique_id": "model.oracle_dbt.highest_user_id", "fqn": ["oracle_dbt", "highest_user_id"], "alias": "highest_user_id", "checksum": {"name": "sha256", "checksum": "3ec7ade9038aceb4e031e458400394ee107db80c0209abeb2c7cd2a9b205a80d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/highest_user_id.py", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1689632368.25182, "relation_name": "FAWDBTCORE.highest_user_id", "raw_code": "def model(dbt, session):\n    dbt.config(materialized=\"table\")\n    raw_users_df = dbt.source(\"FAWDBTCORE\", \"raw_users\")     \n\n    cr = session.cursor()\n    _ = cr.execute(\"SELECT MAX(user_id) FROM stg_users\")\n    max_user_id = cr.fetchone()[0]\n\n    max_user_ids = raw_users_df[raw_users_df[\"USER_ID\"] == max_user_id]\n\n    return max_user_ids", "language": "python", "refs": [], "sources": [["FAWDBTCORE", "raw_users"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_oracle.py_script_postfix"], "nodes": ["source.oracle_dbt.FAWDBTCORE.raw_users"]}, "compiled_path": "target/compiled/oracle_dbt/models/highest_user_id.py", "compiled": true, "compiled_code": "def model(dbt, session):\n    dbt.config(materialized=\"table\")\n    raw_users_df = dbt.source(\"FAWDBTCORE\", \"raw_users\")     \n\n    cr = session.cursor()\n    _ = cr.execute(\"SELECT MAX(user_id) FROM stg_users\")\n    max_user_id = cr.fetchone()[0]\n\n    max_user_ids = raw_users_df[raw_users_df[\"USER_ID\"] == max_user_id]\n\n    return max_user_ids\n\n\ndef main():\n    import oml\n    import pandas as pd\n    def ref(*args, **kwargs):\n        refs = {}\n        key = \".\".join(args)\n        version = kwargs.get(\"v\") or kwargs.get(\"version\")\n        if version:\n            key += f\".v{version}\"\n        schema, table = refs[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    def source(*args, dbt_load_df_function):\n        sources = {\"FAWDBTCORE.raw_users\": \"FAWDBTCORE.raw_users\"}\n        key = \".\".join(args)\n        schema, table = sources[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    config_dict = {}\n\n\n    class config:\n        def __init__(self, *args, **kwargs):\n            pass\n\n        @staticmethod\n        def get(key, default=None):\n            return config_dict.get(key, default)\n\n    class this:\n        \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n        database = \"None\"\n        schema = \"FAWDBTCORE\"\n        identifier = \"highest_user_id\"\n        def __repr__(self):\n            return \"FAWDBTCORE.highest_user_id\"\n\n\n    class dbtObj:\n        def __init__(self, load_df_function) -> None:\n            self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n            self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n            self.config = config\n            self.this = this()\n            self.is_incremental = False\n\n    def model(dbt, session):\n        dbt.config(materialized=\"table\")\n        raw_users_df = dbt.source(\"FAWDBTCORE\", \"raw_users\")     \n    \n        cr = session.cursor()\n        _ = cr.execute(\"SELECT MAX(user_id) FROM stg_users\")\n        max_user_id = cr.fetchone()[0]\n    \n        max_user_ids = raw_users_df[raw_users_df[\"USER_ID\"] == max_user_id]\n    \n        return max_user_ids\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.oracle_dbt.accepted_values_average_duration_by_platform_country_platform__Web__Mobile.1e2cf909c9": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Web", "Mobile"], "column_name": "platform", "model": "{{ get_where_subquery(ref('average_duration_by_platform_country')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "accepted_values_average_duration_by_platform_country_platform__Web__Mobile", "resource_type": "test", "package_name": "oracle_dbt", "path": "accepted_values_average_durati_131e340772cb25915dd993bd4660e197.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.accepted_values_average_duration_by_platform_country_platform__Web__Mobile.1e2cf909c9", "fqn": ["oracle_dbt", "accepted_values_average_duration_by_platform_country_platform__Web__Mobile"], "alias": "accepted_values_average_durati_131e340772cb25915dd993bd4660e197", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_average_durati_131e340772cb25915dd993bd4660e197", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_average_durati_131e340772cb25915dd993bd4660e197"}, "created_at": 1689632368.266769, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_average_durati_131e340772cb25915dd993bd4660e197\") }}", "language": "sql", "refs": [{"name": "average_duration_by_platform_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.oracle_dbt.average_duration_by_platform_country"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "platform", "file_key_name": "models.average_duration_by_platform_country", "attached_node": "model.oracle_dbt.average_duration_by_platform_country"}, "test.oracle_dbt.not_null_average_duration_by_platform_country_platform.300d2e0ab7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "platform", "model": "{{ get_where_subquery(ref('average_duration_by_platform_country')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "not_null_average_duration_by_platform_country_platform", "resource_type": "test", "package_name": "oracle_dbt", "path": "not_null_average_duration_by_platform_country_platform.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.not_null_average_duration_by_platform_country_platform.300d2e0ab7", "fqn": ["oracle_dbt", "not_null_average_duration_by_platform_country_platform"], "alias": "not_null_average_duration_by_platform_country_platform", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.272436, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "average_duration_by_platform_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.oracle_dbt.average_duration_by_platform_country"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "platform", "file_key_name": "models.average_duration_by_platform_country", "attached_node": "model.oracle_dbt.average_duration_by_platform_country"}, "test.oracle_dbt.accepted_values_average_duration_by_platform_country_country__USA__UK__Germany__Canada__Mexico__China__India.fc932b734c": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["USA", "UK", "Germany", "Canada", "Mexico", "China", "India"], "column_name": "country", "model": "{{ get_where_subquery(ref('average_duration_by_platform_country')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "accepted_values_average_duration_by_platform_country_country__USA__UK__Germany__Canada__Mexico__China__India", "resource_type": "test", "package_name": "oracle_dbt", "path": "accepted_values_average_durati_0fad7deda4a42ef8d676ba7210d7a10c.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.accepted_values_average_duration_by_platform_country_country__USA__UK__Germany__Canada__Mexico__China__India.fc932b734c", "fqn": ["oracle_dbt", "accepted_values_average_duration_by_platform_country_country__USA__UK__Germany__Canada__Mexico__China__India"], "alias": "accepted_values_average_durati_0fad7deda4a42ef8d676ba7210d7a10c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_average_durati_0fad7deda4a42ef8d676ba7210d7a10c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_average_durati_0fad7deda4a42ef8d676ba7210d7a10c"}, "created_at": 1689632368.273612, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_average_durati_0fad7deda4a42ef8d676ba7210d7a10c\") }}", "language": "sql", "refs": [{"name": "average_duration_by_platform_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.oracle_dbt.average_duration_by_platform_country"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "country", "file_key_name": "models.average_duration_by_platform_country", "attached_node": "model.oracle_dbt.average_duration_by_platform_country"}, "test.oracle_dbt.not_null_average_duration_by_platform_country_country.4f6c2ff4e0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{{ get_where_subquery(ref('average_duration_by_platform_country')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "not_null_average_duration_by_platform_country_country", "resource_type": "test", "package_name": "oracle_dbt", "path": "not_null_average_duration_by_platform_country_country.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.not_null_average_duration_by_platform_country_country.4f6c2ff4e0", "fqn": ["oracle_dbt", "not_null_average_duration_by_platform_country_country"], "alias": "not_null_average_duration_by_platform_country_country", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.2769039, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "average_duration_by_platform_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.oracle_dbt.average_duration_by_platform_country"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "country", "file_key_name": "models.average_duration_by_platform_country", "attached_node": "model.oracle_dbt.average_duration_by_platform_country"}, "test.oracle_dbt.not_null_average_duration_by_platform_country_avg_duration.c43369543e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "avg_duration", "model": "{{ get_where_subquery(ref('average_duration_by_platform_country')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "not_null_average_duration_by_platform_country_avg_duration", "resource_type": "test", "package_name": "oracle_dbt", "path": "not_null_average_duration_by_platform_country_avg_duration.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.not_null_average_duration_by_platform_country_avg_duration.c43369543e", "fqn": ["oracle_dbt", "not_null_average_duration_by_platform_country_avg_duration"], "alias": "not_null_average_duration_by_platform_country_avg_duration", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.278059, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "average_duration_by_platform_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.oracle_dbt.average_duration_by_platform_country"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_duration", "file_key_name": "models.average_duration_by_platform_country", "attached_node": "model.oracle_dbt.average_duration_by_platform_country"}, "test.oracle_dbt.accepted_values_event_counts_by_platform_platform__Web__Mobile.4c8d6ebeee": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Web", "Mobile"], "column_name": "platform", "model": "{{ get_where_subquery(ref('event_counts_by_platform')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "accepted_values_event_counts_by_platform_platform__Web__Mobile", "resource_type": "test", "package_name": "oracle_dbt", "path": "accepted_values_event_counts_by_platform_platform__Web__Mobile.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.accepted_values_event_counts_by_platform_platform__Web__Mobile.4c8d6ebeee", "fqn": ["oracle_dbt", "accepted_values_event_counts_by_platform_platform__Web__Mobile"], "alias": "accepted_values_event_counts_by_platform_platform__Web__Mobile", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.27931, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "event_counts_by_platform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.oracle_dbt.event_counts_by_platform"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "platform", "file_key_name": "models.event_counts_by_platform", "attached_node": "model.oracle_dbt.event_counts_by_platform"}, "test.oracle_dbt.not_null_event_counts_by_platform_platform.32886038f3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "platform", "model": "{{ get_where_subquery(ref('event_counts_by_platform')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "not_null_event_counts_by_platform_platform", "resource_type": "test", "package_name": "oracle_dbt", "path": "not_null_event_counts_by_platform_platform.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.not_null_event_counts_by_platform_platform.32886038f3", "fqn": ["oracle_dbt", "not_null_event_counts_by_platform_platform"], "alias": "not_null_event_counts_by_platform_platform", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.281717, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "event_counts_by_platform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.oracle_dbt.event_counts_by_platform"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "platform", "file_key_name": "models.event_counts_by_platform", "attached_node": "model.oracle_dbt.event_counts_by_platform"}, "test.oracle_dbt.unique_event_counts_by_platform_platform.9320c3557f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "platform", "model": "{{ get_where_subquery(ref('event_counts_by_platform')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "unique_event_counts_by_platform_platform", "resource_type": "test", "package_name": "oracle_dbt", "path": "unique_event_counts_by_platform_platform.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.unique_event_counts_by_platform_platform.9320c3557f", "fqn": ["oracle_dbt", "unique_event_counts_by_platform_platform"], "alias": "unique_event_counts_by_platform_platform", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.282987, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "event_counts_by_platform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.oracle_dbt.event_counts_by_platform"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "platform", "file_key_name": "models.event_counts_by_platform", "attached_node": "model.oracle_dbt.event_counts_by_platform"}, "test.oracle_dbt.not_null_event_counts_by_platform_event_count.8d7650eca5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_count", "model": "{{ get_where_subquery(ref('event_counts_by_platform')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "not_null_event_counts_by_platform_event_count", "resource_type": "test", "package_name": "oracle_dbt", "path": "not_null_event_counts_by_platform_event_count.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.not_null_event_counts_by_platform_event_count.8d7650eca5", "fqn": ["oracle_dbt", "not_null_event_counts_by_platform_event_count"], "alias": "not_null_event_counts_by_platform_event_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.284105, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "event_counts_by_platform", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.oracle_dbt.event_counts_by_platform"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "event_count", "file_key_name": "models.event_counts_by_platform", "attached_node": "model.oracle_dbt.event_counts_by_platform"}, "test.oracle_dbt.accepted_values_mobile_event_durations_operating_system__iOS__Windows__Android__Linux.95126d4a59": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["iOS", "Windows", "Android", "Linux"], "column_name": "operating_system", "model": "{{ get_where_subquery(ref('mobile_event_durations')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "accepted_values_mobile_event_durations_operating_system__iOS__Windows__Android__Linux", "resource_type": "test", "package_name": "oracle_dbt", "path": "accepted_values_mobile_event_d_3671e929fa606ba6dd14ab52930f9ddd.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.accepted_values_mobile_event_durations_operating_system__iOS__Windows__Android__Linux.95126d4a59", "fqn": ["oracle_dbt", "accepted_values_mobile_event_durations_operating_system__iOS__Windows__Android__Linux"], "alias": "accepted_values_mobile_event_d_3671e929fa606ba6dd14ab52930f9ddd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_mobile_event_d_3671e929fa606ba6dd14ab52930f9ddd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_mobile_event_d_3671e929fa606ba6dd14ab52930f9ddd"}, "created_at": 1689632368.285239, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_mobile_event_d_3671e929fa606ba6dd14ab52930f9ddd\") }}", "language": "sql", "refs": [{"name": "mobile_event_durations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.oracle_dbt.mobile_event_durations"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "operating_system", "file_key_name": "models.mobile_event_durations", "attached_node": "model.oracle_dbt.mobile_event_durations"}, "test.oracle_dbt.not_null_mobile_event_durations_operating_system.f2ad66918d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "operating_system", "model": "{{ get_where_subquery(ref('mobile_event_durations')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "not_null_mobile_event_durations_operating_system", "resource_type": "test", "package_name": "oracle_dbt", "path": "not_null_mobile_event_durations_operating_system.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.not_null_mobile_event_durations_operating_system.f2ad66918d", "fqn": ["oracle_dbt", "not_null_mobile_event_durations_operating_system"], "alias": "not_null_mobile_event_durations_operating_system", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.288092, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mobile_event_durations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.oracle_dbt.mobile_event_durations"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "operating_system", "file_key_name": "models.mobile_event_durations", "attached_node": "model.oracle_dbt.mobile_event_durations"}, "test.oracle_dbt.unique_mobile_event_durations_operating_system.d298e49ef8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "operating_system", "model": "{{ get_where_subquery(ref('mobile_event_durations')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "unique_mobile_event_durations_operating_system", "resource_type": "test", "package_name": "oracle_dbt", "path": "unique_mobile_event_durations_operating_system.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.unique_mobile_event_durations_operating_system.d298e49ef8", "fqn": ["oracle_dbt", "unique_mobile_event_durations_operating_system"], "alias": "unique_mobile_event_durations_operating_system", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.28921, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mobile_event_durations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.oracle_dbt.mobile_event_durations"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "operating_system", "file_key_name": "models.mobile_event_durations", "attached_node": "model.oracle_dbt.mobile_event_durations"}, "test.oracle_dbt.not_null_mobile_event_durations_avg_duration.3a820931c4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "avg_duration", "model": "{{ get_where_subquery(ref('mobile_event_durations')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "not_null_mobile_event_durations_avg_duration", "resource_type": "test", "package_name": "oracle_dbt", "path": "not_null_mobile_event_durations_avg_duration.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.not_null_mobile_event_durations_avg_duration.3a820931c4", "fqn": ["oracle_dbt", "not_null_mobile_event_durations_avg_duration"], "alias": "not_null_mobile_event_durations_avg_duration", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.29043, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mobile_event_durations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.oracle_dbt.mobile_event_durations"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_duration", "file_key_name": "models.mobile_event_durations", "attached_node": "model.oracle_dbt.mobile_event_durations"}, "test.oracle_dbt.not_null_most_active_mobile_users_name.8bbc965395": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('most_active_mobile_users')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "not_null_most_active_mobile_users_name", "resource_type": "test", "package_name": "oracle_dbt", "path": "not_null_most_active_mobile_users_name.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.not_null_most_active_mobile_users_name.8bbc965395", "fqn": ["oracle_dbt", "not_null_most_active_mobile_users_name"], "alias": "not_null_most_active_mobile_users_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.291532, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "most_active_mobile_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.oracle_dbt.most_active_mobile_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "name", "file_key_name": "models.most_active_mobile_users", "attached_node": "model.oracle_dbt.most_active_mobile_users"}, "test.oracle_dbt.not_null_most_active_mobile_users_num_mobile_events.cae10138ea": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "num_mobile_events", "model": "{{ get_where_subquery(ref('most_active_mobile_users')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "not_null_most_active_mobile_users_num_mobile_events", "resource_type": "test", "package_name": "oracle_dbt", "path": "not_null_most_active_mobile_users_num_mobile_events.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.not_null_most_active_mobile_users_num_mobile_events.cae10138ea", "fqn": ["oracle_dbt", "not_null_most_active_mobile_users_num_mobile_events"], "alias": "not_null_most_active_mobile_users_num_mobile_events", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.292625, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "most_active_mobile_users", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.oracle_dbt.most_active_mobile_users"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "num_mobile_events", "file_key_name": "models.most_active_mobile_users", "attached_node": "model.oracle_dbt.most_active_mobile_users"}, "test.oracle_dbt.not_null_most_frequent_browser_name.32d8a1b928": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "name", "model": "{{ get_where_subquery(ref('most_frequent_browser')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "not_null_most_frequent_browser_name", "resource_type": "test", "package_name": "oracle_dbt", "path": "not_null_most_frequent_browser_name.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.not_null_most_frequent_browser_name.32d8a1b928", "fqn": ["oracle_dbt", "not_null_most_frequent_browser_name"], "alias": "not_null_most_frequent_browser_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.293708, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "most_frequent_browser", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.oracle_dbt.most_frequent_browser"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "name", "file_key_name": "models.most_frequent_browser", "attached_node": "model.oracle_dbt.most_frequent_browser"}, "test.oracle_dbt.not_null_most_frequent_browser_most_frequent_browser.4670c59ec9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "most_frequent_browser", "model": "{{ get_where_subquery(ref('most_frequent_browser')) }}"}, "namespace": null}, "database": "None", "schema": "FAWDBTCORE_dbt_test__audit", "name": "not_null_most_frequent_browser_most_frequent_browser", "resource_type": "test", "package_name": "oracle_dbt", "path": "not_null_most_frequent_browser_most_frequent_browser.sql", "original_file_path": "models/schema.yml", "unique_id": "test.oracle_dbt.not_null_most_frequent_browser_most_frequent_browser.4670c59ec9", "fqn": ["oracle_dbt", "not_null_most_frequent_browser_most_frequent_browser"], "alias": "not_null_most_frequent_browser_most_frequent_browser", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1689632368.294902, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "most_frequent_browser", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.oracle_dbt.most_frequent_browser"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "most_frequent_browser", "file_key_name": "models.most_frequent_browser", "attached_node": "model.oracle_dbt.most_frequent_browser"}, "model.oracle_dbt.requisition_anomaly": {"database": "None", "schema": "FAWDBTCORE", "name": "requisition_anomaly", "resource_type": "model", "package_name": "oracle_dbt", "path": "requisition_anomaly.py", "original_file_path": "models/requisition_anomaly.py", "unique_id": "model.oracle_dbt.requisition_anomaly", "fqn": ["oracle_dbt", "requisition_anomaly"], "alias": "requisition_anomaly", "checksum": {"name": "sha256", "checksum": "834bde7df75d4688afdc63542c86f1871f2b783a84e936d0da19222e042eed79"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "async_flag": true, "timeout": 1800, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/oracle_dbt/models/requisition_anomaly.py", "deferred": false, "unrendered_config": {"materialized": "table", "async_flag": true, "timeout": 1800}, "created_at": 1689698049.632289, "relation_name": "FAWDBTCORE.requisition_anomaly", "raw_code": "import pandas as pd\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing import LabelEncoder\n\nimport numpy as np\nfrom sklearn.preprocessing import OrdinalEncoder\ndef model(dbt, session):\n\n    dbt.config(materialized=\"table\")\n    dbt.config(async_flag=True)  # run the python function in async mode\n    dbt.config(timeout=1800)  # timeout of 30 minutes\n    data = dbt.source(\"FAWDBTCORE\", \"requisitions\")\n    data = data.pull()\n    df = data.dropna(axis = 1, how = \"any\")\n    df = df.dropna(axis = 0, how = \"all\")\n    #df = df.dropna()\n    cat = df.select_dtypes(include=\"object\").columns.tolist()\n\n    df[cat]=df[cat].astype(\"str\")\n    data = df.apply(LabelEncoder().fit_transform)\n    data = data.loc[:, (df != 0).any(axis=0)]\n    features = data.columns\n\n    # Train the Isolation Forest model\n    model = IsolationForest(n_estimators=100, contamination=\"auto\")\n    model.fit(data[features])\n\n    # Predict the anomalies\n    anomalies = model.predict(data[features])\n\n    # Add the anomalies to the original data\n    data[\"anomaly\"] = anomalies\n\n    # Print the anomalies\n    res_df = data[data[\"anomaly\"] == -1]\n\n\n    return data", "language": "python", "refs": [], "sources": [["FAWDBTCORE", "requisitions"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_oracle.py_script_postfix"], "nodes": ["source.oracle_dbt.FAWDBTCORE.requisitions"]}, "compiled_path": "target/compiled/oracle_dbt/models/requisition_anomaly.py", "compiled": true, "compiled_code": "import pandas as pd\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.preprocessing import LabelEncoder\n\nimport numpy as np\nfrom sklearn.preprocessing import OrdinalEncoder\ndef model(dbt, session):\n\n    dbt.config(materialized=\"table\")\n    dbt.config(async_flag=True)  # run the python function in async mode\n    dbt.config(timeout=1800)  # timeout of 30 minutes\n    data = dbt.source(\"FAWDBTCORE\", \"requisitions\")\n    data = data.pull()\n    df = data.dropna(axis = 1, how = \"any\")\n    df = df.dropna(axis = 0, how = \"all\")\n    #df = df.dropna()\n    cat = df.select_dtypes(include=\"object\").columns.tolist()\n\n    df[cat]=df[cat].astype(\"str\")\n    data = df.apply(LabelEncoder().fit_transform)\n    data = data.loc[:, (df != 0).any(axis=0)]\n    features = data.columns\n\n    # Train the Isolation Forest model\n    model = IsolationForest(n_estimators=100, contamination=\"auto\")\n    model.fit(data[features])\n\n    # Predict the anomalies\n    anomalies = model.predict(data[features])\n\n    # Add the anomalies to the original data\n    data[\"anomaly\"] = anomalies\n\n    # Print the anomalies\n    res_df = data[data[\"anomaly\"] == -1]\n\n\n    return data\n\n\ndef main():\n    import oml\n    import pandas as pd\n    def ref(*args, **kwargs):\n        refs = {}\n        key = \".\".join(args)\n        version = kwargs.get(\"v\") or kwargs.get(\"version\")\n        if version:\n            key += f\".v{version}\"\n        schema, table = refs[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    def source(*args, dbt_load_df_function):\n        sources = {\"FAWDBTCORE.requisitions\": \"FAWDBTCORE.requisitions\"}\n        key = \".\".join(args)\n        schema, table = sources[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n\n    config_dict = {}\n\n\n    class config:\n        def __init__(self, *args, **kwargs):\n            pass\n\n        @staticmethod\n        def get(key, default=None):\n            return config_dict.get(key, default)\n\n    class this:\n        \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n        database = \"None\"\n        schema = \"FAWDBTCORE\"\n        identifier = \"requisition_anomaly\"\n        def __repr__(self):\n            return \"FAWDBTCORE.requisition_anomaly\"\n\n\n    class dbtObj:\n        def __init__(self, load_df_function) -> None:\n            self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n            self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n            self.config = config\n            self.this = this()\n            self.is_incremental = False\n\n    import pandas as pd\n    from sklearn.ensemble import IsolationForest\n    from sklearn.preprocessing import LabelEncoder\n    \n    import numpy as np\n    from sklearn.preprocessing import OrdinalEncoder\n    def model(dbt, session):\n    \n        dbt.config(materialized=\"table\")\n        dbt.config(async_flag=True)  # run the python function in async mode\n        dbt.config(timeout=1800)  # timeout of 30 minutes\n        data = dbt.source(\"FAWDBTCORE\", \"requisitions\")\n        data = data.pull()\n        df = data.dropna(axis = 1, how = \"any\")\n        df = df.dropna(axis = 0, how = \"all\")\n        #df = df.dropna()\n        cat = df.select_dtypes(include=\"object\").columns.tolist()\n    \n        df[cat]=df[cat].astype(\"str\")\n        data = df.apply(LabelEncoder().fit_transform)\n        data = data.loc[:, (df != 0).any(axis=0)]\n        features = data.columns\n    \n        # Train the Isolation Forest model\n        model = IsolationForest(n_estimators=100, contamination=\"auto\")\n        model.fit(data[features])\n    \n        # Predict the anomalies\n        anomalies = model.predict(data[features])\n    \n        # Add the anomalies to the original data\n        data[\"anomaly\"] = anomalies\n    \n        # Print the anomalies\n        res_df = data[data[\"anomaly\"] == -1]\n    \n    \n        return data\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}}, "sources": {"source.oracle_dbt.FAWDBTCORE.web_events": {"database": null, "schema": "FAWDBTCORE", "name": "web_events", "resource_type": "source", "package_name": "oracle_dbt", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.oracle_dbt.FAWDBTCORE.web_events", "fqn": ["oracle_dbt", "FAWDBTCORE", "web_events"], "source_name": "FAWDBTCORE", "source_description": "", "loader": "", "identifier": "web_events", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "FAWDBTCORE.web_events", "created_at": 1689632368.301037}, "source.oracle_dbt.FAWDBTCORE.mobile_events": {"database": null, "schema": "FAWDBTCORE", "name": "mobile_events", "resource_type": "source", "package_name": "oracle_dbt", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.oracle_dbt.FAWDBTCORE.mobile_events", "fqn": ["oracle_dbt", "FAWDBTCORE", "mobile_events"], "source_name": "FAWDBTCORE", "source_description": "", "loader": "", "identifier": "mobile_events", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "FAWDBTCORE.mobile_events", "created_at": 1689632368.30114}, "source.oracle_dbt.FAWDBTCORE.web_order_info": {"database": null, "schema": "FAWDBTCORE", "name": "web_order_info", "resource_type": "source", "package_name": "oracle_dbt", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.oracle_dbt.FAWDBTCORE.web_order_info", "fqn": ["oracle_dbt", "FAWDBTCORE", "web_order_info"], "source_name": "FAWDBTCORE", "source_description": "", "loader": "", "identifier": "web_order_info", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "FAWDBTCORE.web_order_info", "created_at": 1689632368.3012202}, "source.oracle_dbt.FAWDBTCORE.raw_users": {"database": null, "schema": "FAWDBTCORE", "name": "raw_users", "resource_type": "source", "package_name": "oracle_dbt", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.oracle_dbt.FAWDBTCORE.raw_users", "fqn": ["oracle_dbt", "FAWDBTCORE", "raw_users"], "source_name": "FAWDBTCORE", "source_description": "", "loader": "", "identifier": "raw_users", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "FAWDBTCORE.raw_users", "created_at": 1689632368.301295}, "source.oracle_dbt.FAWDBTCORE.invoices": {"database": null, "schema": "FAWDBTCORE", "name": "invoices", "resource_type": "source", "package_name": "oracle_dbt", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.oracle_dbt.FAWDBTCORE.invoices", "fqn": ["oracle_dbt", "FAWDBTCORE", "invoices"], "source_name": "FAWDBTCORE", "source_description": "", "loader": "", "identifier": "invoices", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "FAWDBTCORE.invoices", "created_at": 1689632368.301367}, "source.oracle_dbt.FAWDBTCORE.requisitions": {"database": null, "schema": "FAWDBTCORE", "name": "requisitions", "resource_type": "source", "package_name": "oracle_dbt", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.oracle_dbt.FAWDBTCORE.requisitions", "fqn": ["oracle_dbt", "FAWDBTCORE", "requisitions"], "source_name": "FAWDBTCORE", "source_description": "", "loader": "", "identifier": "requisitions", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "FAWDBTCORE.requisitions", "created_at": 1689632368.301436}}, "macros": {"macro.dbt_oracle.oracle__get_catalog": {"name": "oracle__get_catalog", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_oracle.oracle__get_catalog", "macro_sql": "{% macro oracle__get_catalog(information_schema, schemas) -%}\r\n\r\n  {%- call statement('catalog', fetch_result=True) -%}\r\n    {#\r\n      If the user has multiple databases set and the first one is wrong, this will fail.\r\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\r\n    #}\r\n    {% set database = information_schema.database %}\r\n    {% if database == 'None' or database is undefined or database is none %}\r\n      {% set database = get_database_name() %}\r\n    {% endif %}\r\n    {{ adapter.verify_database(database) }}\r\n\r\n    with columns as (\r\n            select\r\n                SYS_CONTEXT('userenv', 'DB_NAME') table_catalog,\r\n                owner table_schema,\r\n                table_name,\r\n                column_name,\r\n                data_type,\r\n                data_type_mod,\r\n                decode(data_type_owner, null, TO_CHAR(null), SYS_CONTEXT('userenv', 'DB_NAME')) domain_catalog,\r\n                data_type_owner domain_schema,\r\n                data_length character_maximum_length,\r\n                data_length character_octet_length,\r\n                data_length,\r\n                data_precision numeric_precision,\r\n                data_scale numeric_scale,\r\n                nullable is_nullable,\r\n                column_id ordinal_position,\r\n                default_length,\r\n                data_default column_default,\r\n                num_distinct,\r\n                low_value,\r\n                high_value,\r\n                density,\r\n                num_nulls,\r\n                num_buckets,\r\n                last_analyzed,\r\n                sample_size,\r\n                SYS_CONTEXT('userenv', 'DB_NAME') character_set_catalog,\r\n                'SYS' character_set_schema,\r\n                SYS_CONTEXT('userenv', 'DB_NAME') collation_catalog,\r\n                'SYS' collation_schema,\r\n                character_set_name,\r\n                char_col_decl_length,\r\n                global_stats,\r\n                user_stats,\r\n                avg_col_len,\r\n                char_length,\r\n                char_used,\r\n                v80_fmt_image,\r\n                data_upgraded,\r\n                histogram\r\n              from sys.all_tab_columns\r\n          ),\r\n          tables as\r\n                (select SYS_CONTEXT('userenv', 'DB_NAME') table_catalog,\r\n                   owner table_schema,\r\n                   table_name,\r\n                   case\r\n                     when iot_type = 'Y'\r\n                     then 'IOT'\r\n                     when temporary = 'Y'\r\n                     then 'TEMP'\r\n                     else 'BASE TABLE'\r\n                   end table_type\r\n                 from sys.all_tables\r\n                 union all\r\n                 select SYS_CONTEXT('userenv', 'DB_NAME'),\r\n                   owner,\r\n                   view_name,\r\n                   'VIEW'\r\n                 from sys.all_views\r\n          )\r\n          select\r\n              tables.table_catalog as \"table_database\",\r\n              tables.table_schema as \"table_schema\",\r\n              tables.table_name as \"table_name\",\r\n              tables.table_type as \"table_type\",\r\n              all_tab_comments.comments as \"table_comment\",\r\n              columns.column_name as \"column_name\",\r\n              ordinal_position as \"column_index\",\r\n              case\r\n                when data_type like '%CHAR%'\r\n                then data_type || '(' || cast(char_length as varchar(10)) || ')'\r\n                else data_type\r\n              end as \"column_type\",\r\n              all_col_comments.comments as \"column_comment\",\r\n              tables.table_schema as \"table_owner\"\r\n          from tables\r\n          inner join columns on upper(columns.table_catalog) = upper(tables.table_catalog)\r\n            and upper(columns.table_schema) = upper(tables.table_schema)\r\n            and upper(columns.table_name) = upper(tables.table_name)\r\n          left join all_tab_comments\r\n            on upper(all_tab_comments.owner) = upper(tables.table_schema)\r\n              and upper(all_tab_comments.table_name) = upper(tables.table_name)\r\n          left join all_col_comments\r\n            on upper(all_col_comments.owner) = upper(columns.table_schema)\r\n              and upper(all_col_comments.table_name) = upper(columns.table_name)\r\n              and upper(all_col_comments.column_name) = upper(columns.column_name)\r\n          where (\r\n              {%- for schema in schemas -%}\r\n                upper(tables.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\r\n              {%- endfor -%}\r\n            )\r\n          order by\r\n              tables.table_schema,\r\n              tables.table_name,\r\n              ordinal_position\r\n  {%- endcall -%}\r\n\r\n  {{ return(load_result('catalog').table) }}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_oracle.get_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.43537, "supported_languages": null}, "macro.dbt_oracle.oracle__test_accepted_values": {"name": "oracle__test_accepted_values", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/schema_tests.sql", "original_file_path": "macros/schema_tests.sql", "unique_id": "macro.dbt_oracle.oracle__test_accepted_values", "macro_sql": "{% macro oracle__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect * from(\n    select count(*) as not_accepted_values from validation_errors\n                 ) c where c.not_accepted_values != 0\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.4368079, "supported_languages": null}, "macro.dbt_oracle.oracle__test_not_null": {"name": "oracle__test_not_null", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/schema_tests.sql", "original_file_path": "macros/schema_tests.sql", "unique_id": "macro.dbt_oracle.oracle__test_not_null", "macro_sql": "{% macro oracle__test_not_null(model, column_name) %}\n\nselect * from (\nselect count(*) as null_count\nfrom {{ model }}\nwhere {{ column_name }} is null) c where c.null_count != 0\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.4370089, "supported_languages": null}, "macro.dbt_oracle.oracle__test_relationships": {"name": "oracle__test_relationships", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/schema_tests.sql", "original_file_path": "macros/schema_tests.sql", "unique_id": "macro.dbt_oracle.oracle__test_relationships", "macro_sql": "{% macro oracle__test_relationships(model, column_name, to, field) %}\n\nselect * from (\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) child\nleft join (\n    select {{ field }} as id from {{ to }}\n) parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null) c where c.validation_errors != 0\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.4372978, "supported_languages": null}, "macro.dbt_oracle.oracle__get_columns_in_query": {"name": "oracle__get_columns_in_query", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__get_columns_in_query", "macro_sql": "{% macro oracle__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) dbt_sbq_tmp\n        where 1 = 0 and rownum < 1\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.4565609, "supported_languages": null}, "macro.dbt_oracle.oracle__get_empty_subquery_sql": {"name": "oracle__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__get_empty_subquery_sql", "macro_sql": "{% macro oracle__get_empty_subquery_sql(select_sql) %}\n    select * from (\n        {{ select_sql }}\n    ) dbt_sbq_tmp\n    where 1 = 0 and rownum < 1\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.4566941, "supported_languages": null}, "macro.dbt_oracle.oracle__get_empty_schema_sql": {"name": "oracle__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__get_empty_schema_sql", "macro_sql": "{% macro oracle__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      cast(null as {{ col['data_type'] }}) as {{ col['name'] }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {# Override for Oracle #}\n     from dual\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.457379, "supported_languages": null}, "macro.dbt_oracle.oracle__get_select_subquery": {"name": "oracle__get_select_subquery", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__get_select_subquery", "macro_sql": "{% macro oracle__get_select_subquery(sql) %}\n    select\n    {% for column in model['columns'] %}\n      {{ column }}{{ \", \" if not loop.last }}\n    {% endfor %}\n    from (\n        {{ sql }}\n    ) model_subq\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.45766, "supported_languages": null}, "macro.dbt_oracle.oracle__create_schema": {"name": "oracle__create_schema", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__create_schema", "macro_sql": "{% macro oracle__create_schema(relation, schema_name) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    -- Noop for not breaking tests, oracle\n    -- schemas are actualy users, we can't\n    -- create it here\n    select 'a' from dual\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.457919, "supported_languages": null}, "macro.dbt_oracle.oracle__drop_schema": {"name": "oracle__drop_schema", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__drop_schema", "macro_sql": "{% macro oracle__drop_schema(schema) -%}\n  {% if schema.database -%}\n    {{ adapter.verify_database(schema.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    -- from https://gist.github.com/rafaeleyng/33eaef673fc4ee98a6de4f70c8ce3657\n    BEGIN\n    FOR cur_rec IN (SELECT object_name, object_type\n                      FROM ALL_objects\n                      WHERE object_type IN\n                              ('TABLE',\n                                'VIEW',\n                                'PACKAGE',\n                                'PROCEDURE',\n                                'FUNCTION',\n                                'SEQUENCE',\n                                'TYPE',\n                                'SYNONYM',\n                                'MATERIALIZED VIEW'\n                              )\n                      AND upper(owner) = '{{ schema | upper }}')\n    LOOP\n        BEGIN\n          IF cur_rec.object_type = 'TABLE'\n          THEN\n              EXECUTE IMMEDIATE    'DROP '\n                                || cur_rec.object_type\n                                || ' \"'\n                                || cur_rec.object_name\n                                || '\" CASCADE CONSTRAINTS';\n          ELSE\n              EXECUTE IMMEDIATE    'DROP '\n                                || cur_rec.object_type\n                                || ' \"'\n                                || cur_rec.object_name\n                                || '\"';\n          END IF;\n        EXCEPTION\n          WHEN OTHERS\n          THEN\n              DBMS_OUTPUT.put_line (   'FAILED: DROP '\n                                    || cur_rec.object_type\n                                    || ' \"'\n                                    || cur_rec.object_name\n                                    || '\"'\n                                  );\n        END;\n    END LOOP;\n  END;\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.458296, "supported_languages": null}, "macro.dbt_oracle.oracle__create_table_as_backup": {"name": "oracle__create_table_as_backup", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__create_table_as_backup", "macro_sql": "{% macro oracle__create_table_as_backup(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create {% if temporary -%}\n    global temporary\n  {%- endif %} table {{ relation.include(schema=(not temporary)) }}\n  {% if temporary -%} on commit preserve rows {%- endif %}\n  as\n    {{ sql }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.458723, "supported_languages": null}, "macro.dbt_oracle.oracle__create_table_as": {"name": "oracle__create_table_as", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__create_table_as", "macro_sql": "{% macro oracle__create_table_as(temporary, relation, sql, language='sql') -%}\n {%- if language == 'sql' -%}\n      {%- set sql_header = config.get('sql_header', none) -%}\n      {%- set parallel = config.get('parallel', none) -%}\n      {%- set compression_clause = config.get('table_compression_clause', none) -%}\n      {%- set contract_config = config.get('contract') -%}\n      {{ sql_header if sql_header is not none }}\n      create {% if temporary -%}\n        global temporary\n      {%- endif %} table {{ relation.include(schema=(not temporary)) }}\n      {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {%- set sql = get_select_subquery(sql) %}\n      {% endif %}\n      {% if temporary -%} on commit preserve rows {%- endif %}\n      {% if not temporary -%}\n        {% if parallel %} parallel {{ parallel }}{% endif %}\n        {% if compression_clause %} {{ compression_clause }} {% endif %}\n      {%- endif %}\n      as\n        {{ sql }}\n{%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"oracle__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_oracle.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.459958, "supported_languages": null}, "macro.dbt_oracle.oracle__create_view_as": {"name": "oracle__create_view_as", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__create_view_as", "macro_sql": "{% macro oracle__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n   {%- set contract_config = config.get('contract') -%}\n   {%- if contract_config.enforced -%}\n      {{ get_assert_columns_equivalent(sql) }}\n   {%- endif %}\n  {{ sql_header if sql_header is not none }}\n  create or replace view {{ relation }} as\n    {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.460365, "supported_languages": null}, "macro.dbt_oracle.oracle__get_columns_in_relation": {"name": "oracle__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__get_columns_in_relation", "macro_sql": "{% macro oracle__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with columns as (\n        select\n            SYS_CONTEXT('userenv', 'DB_NAME') table_catalog,\n            owner table_schema,\n            table_name,\n            column_name,\n            data_type,\n            data_type_mod,\n            decode(data_type_owner, null, TO_CHAR(null), SYS_CONTEXT('userenv', 'DB_NAME')) domain_catalog,\n            data_type_owner domain_schema,\n            data_length character_maximum_length,\n            data_length character_octet_length,\n            data_length,\n            data_precision numeric_precision,\n            data_scale numeric_scale,\n            nullable is_nullable,\n            column_id ordinal_position,\n            default_length,\n            data_default column_default,\n            num_distinct,\n            low_value,\n            high_value,\n            density,\n            num_nulls,\n            num_buckets,\n            last_analyzed,\n            sample_size,\n            SYS_CONTEXT('userenv', 'DB_NAME') character_set_catalog,\n            'SYS' character_set_schema,\n            SYS_CONTEXT('userenv', 'DB_NAME') collation_catalog,\n            'SYS' collation_schema,\n            character_set_name,\n            char_col_decl_length,\n            global_stats,\n            user_stats,\n            avg_col_len,\n            char_length,\n            char_used,\n            v80_fmt_image,\n            data_upgraded,\n            histogram\n          from sys.all_tab_columns\n      )\n      select\n          column_name as \"name\",\n          data_type as \"type\",\n          char_length as \"character_maximum_length\",\n          numeric_precision as \"numeric_precision\",\n          numeric_scale as \"numeric_scale\"\n      from columns\n      where upper(table_name) = upper('{{ relation.identifier }}')\n        {% if relation.schema %}\n        and upper(table_schema) = upper('{{ relation.schema }}')\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.460876, "supported_languages": null}, "macro.dbt_oracle.oracle_escape_comment": {"name": "oracle_escape_comment", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle_escape_comment", "macro_sql": "{% macro oracle_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set start_quote = \"q'<\" -%}\n  {%- set end_quote = \">'\" -%}\n  {%- if end_quote in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ end_quote ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ start_quote }}{{ comment }}{{ end_quote }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.461322, "supported_languages": null}, "macro.dbt_oracle.oracle__alter_relation_comment": {"name": "oracle__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__alter_relation_comment", "macro_sql": "{% macro oracle__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = oracle_escape_comment(comment) %}\n  {# \"comment on table\" even for views #}\n  comment on table {{ relation }} is {{ escaped_comment }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.4615219, "supported_languages": null}, "macro.dbt_oracle.oracle__persist_docs": {"name": "oracle__persist_docs", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__persist_docs", "macro_sql": "{% macro oracle__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% set column_dict = model.columns %}\n    {% for column_name in column_dict %}\n      {% set comment = column_dict[column_name]['description'] %}\n      {% set escaped_comment = oracle_escape_comment(comment) %}\n      {% call statement('alter _column comment', fetch_result=False) -%}\n        comment on column {{ relation }}.{{ column_name }} is {{ escaped_comment }}\n      {%- endcall %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt_oracle.oracle_escape_comment", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.462292, "supported_languages": null}, "macro.dbt_oracle.oracle__alter_column_type": {"name": "oracle__alter_column_type", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__alter_column_type", "macro_sql": "{% macro oracle__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type 1', fetch_result=False) %}\n    alter table {{ relation }} add {{ tmp_column }} {{ new_column_type }}\n  {% endcall %}\n  {% call statement('alter_column_type 2', fetch_result=False) %}\n    update {{ relation  }} set {{ tmp_column }} = {{ column_name }}\n  {% endcall %}\n  {% call statement('alter_column_type 3', fetch_result=False) %}\n    alter table {{ relation }} drop column {{ column_name }} cascade constraints\n  {% endcall %}\n  {% call statement('alter_column_type 4', fetch_result=False) %}\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.4629738, "supported_languages": null}, "macro.dbt_oracle.oracle__drop_relation": {"name": "oracle__drop_relation", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__drop_relation", "macro_sql": "{% macro oracle__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n   DECLARE\n     dne_942    EXCEPTION;\n     PRAGMA EXCEPTION_INIT(dne_942, -942);\n     attempted_ddl_on_in_use_GTT EXCEPTION;\n     pragma EXCEPTION_INIT(attempted_ddl_on_in_use_GTT, -14452);\n  BEGIN\n     SAVEPOINT start_transaction;\n     EXECUTE IMMEDIATE 'DROP {{ relation.type }} {{ relation }} cascade constraint';\n     COMMIT;\n  EXCEPTION\n     WHEN attempted_ddl_on_in_use_GTT THEN\n        NULL; -- if it its a global temporary table, leave it alone.\n     WHEN dne_942 THEN\n        NULL;\n  END;\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.463218, "supported_languages": null}, "macro.dbt_oracle.oracle__truncate_relation": {"name": "oracle__truncate_relation", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__truncate_relation", "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\n  {#-- To avoid `ORA-01702: a view is not appropriate here` we check that the relation to be truncated is a table #}\n  {% if relation.is_table %}\n    {% call statement('truncate_relation') -%}\n        truncate table {{ relation }}\n    {%- endcall %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.46344, "supported_languages": null}, "macro.dbt_oracle.oracle__rename_relation": {"name": "oracle__rename_relation", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__rename_relation", "macro_sql": "{% macro oracle__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    ALTER {{ from_relation.type }} {{ from_relation }} rename to {{ to_relation.include(schema=False) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.463682, "supported_languages": null}, "macro.dbt_oracle.oracle__information_schema_name": {"name": "oracle__information_schema_name", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__information_schema_name", "macro_sql": "{% macro oracle__information_schema_name(database) -%}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  sys\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.4638479, "supported_languages": null}, "macro.dbt_oracle.oracle__list_schemas": {"name": "oracle__list_schemas", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__list_schemas", "macro_sql": "{% macro oracle__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n     \tselect username as \"name\"\n      from sys.all_users\n      order by username\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.46417, "supported_languages": null}, "macro.dbt_oracle.oracle__check_schema_exists": {"name": "oracle__check_schema_exists", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__check_schema_exists", "macro_sql": "{% macro oracle__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from sys.all_users where username = upper('{{ schema }}')\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.464651, "supported_languages": null}, "macro.dbt_oracle.oracle__list_relations_without_caching": {"name": "oracle__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__list_relations_without_caching", "macro_sql": "{% macro oracle__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    with tables as\n      (select SYS_CONTEXT('userenv', 'DB_NAME') table_catalog,\n         owner table_schema,\n         table_name,\n         case\n           when iot_type = 'Y'\n           then 'IOT'\n           when temporary = 'Y'\n           then 'TEMP'\n           else 'BASE TABLE'\n         end table_type\n       from sys.all_tables\n       union all\n       select SYS_CONTEXT('userenv', 'DB_NAME'),\n         owner,\n         view_name,\n         'VIEW'\n       from sys.all_views\n  )\n  select table_catalog as \"database_name\"\n    ,table_name as \"name\"\n    ,table_schema as \"schema_name\"\n    ,case table_type\n      when 'BASE TABLE' then 'table'\n      when 'VIEW' then 'view'\n    end as \"kind\"\n  from tables\n  where table_type in ('BASE TABLE', 'VIEW')\n    and upper(table_schema) = upper('{{ schema_relation.schema }}')\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.464962, "supported_languages": null}, "macro.dbt_oracle.oracle__make_temp_relation": {"name": "oracle__make_temp_relation", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.oracle__make_temp_relation", "macro_sql": "{% macro oracle__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set tmp_identifier = 'o$pt_' ~ base_relation.identifier ~ dtstring %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier, \"schema\": None}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.465441, "supported_languages": null}, "macro.dbt_oracle.get_database_name": {"name": "get_database_name", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_oracle.get_database_name", "macro_sql": "{% macro get_database_name() %}\n    {% set results = run_query(\"select SYS_CONTEXT('userenv', 'DB_NAME') FROM DUAL\") %}\n    {% set db_name = results.columns[0].values()[0] %}\n    {{ return(db_name) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.465711, "supported_languages": null}, "macro.dbt_oracle.oracle__get_show_grant_sql": {"name": "oracle__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_oracle.oracle__get_show_grant_sql", "macro_sql": "{% macro oracle__get_show_grant_sql(relation) %}\n    {# SQL that returns the current grants (grantee-privilege pairs) #}\n    SELECT grantee as \"grantee\", privilege as \"privilege_type\"\n    FROM SYS.ALL_TAB_PRIVS\n    WHERE UPPER(table_name) = UPPER('{{ relation.identifier }}')\n    {% if relation.schema %}\n        AND UPPER(table_schema) = UPPER('{{ relation.schema }}')\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.4660978, "supported_languages": null}, "macro.dbt_oracle.oracle__call_dcl_statements": {"name": "oracle__call_dcl_statements", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_oracle.oracle__call_dcl_statements", "macro_sql": "{% macro oracle__call_dcl_statements(dcl_statement_list) %}\n     {# Run each grant/revoke statement against the database. This is the culmination of apply_grants() #}\n     {% for dcl_statement in dcl_statement_list %}\n        {% do run_query(dcl_statement) %}\n     {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.466294, "supported_languages": null}, "macro.dbt_oracle.oracle__alter_relation_add_remove_columns": {"name": "oracle__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/columns.sql", "original_file_path": "macros/columns.sql", "unique_id": "macro.dbt_oracle.oracle__alter_relation_add_remove_columns", "macro_sql": "{% macro oracle__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n{# To avoid ORA-12987: cannot combine drop column with other operations, we execute 2 different SQL for add and drop respectively #}\n\n{% if add_columns|length > 0 %}\n  {% set add_sql %}\n          ALTER {{ relation.type }} {{ relation }}\n              ADD (\n              {% for column in add_columns %}\n                {{ adapter.check_and_quote_identifier(column.name, model.columns) }} {{ column.data_type }}{{ ',' if not loop.last }}\n              {% endfor %}\n              )\n  {% endset %}\n  {% do run_query(add_sql)%}\n{% endif %}\n\n{% if remove_columns|length > 0 %}\n    {% set remove_sql %}\n          ALTER {{ relation.type }} {{ relation }}\n              DROP (\n                {% for column in remove_columns %}\n                  {{ adapter.check_and_quote_identifier(column.name, model.columns) }}{{ ',' if not loop.last }}\n                {% endfor %}\n                ) CASCADE CONSTRAINTS\n   {% endset %}\n   {% do run_query(remove_sql)%}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.468082, "supported_languages": null}, "macro.dbt_oracle.get_quoted_column_csv": {"name": "get_quoted_column_csv", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/columns.sql", "original_file_path": "macros/columns.sql", "unique_id": "macro.dbt_oracle.get_quoted_column_csv", "macro_sql": "{% macro get_quoted_column_csv(model, column_names) %}\n    {%- set quoted = [] -%}\n    {% for col in column_names %}\n        {%- do quoted.append(adapter.check_and_quote_identifier(col, model.columns)) -%}\n     {% endfor %}\n    {%- set cols_csv = quoted | join(', ') -%}\n    {{ return(cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.468436, "supported_languages": null}, "macro.dbt_oracle.oracle__snapshot_merge_sql": {"name": "oracle__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "unique_id": "macro.dbt_oracle.oracle__snapshot_merge_sql", "macro_sql": "{% macro oracle__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = [] -%}\n\n    {% for column in insert_cols %}\n      {% do insert_cols_csv.append(\"s.\" + column) %}\n    {% endfor %}\n\n    {%- set dest_cols_csv = [] -%}\n\n    {% for column in insert_cols %}\n      {% do dest_cols_csv.append(\"d.\" + column) %}\n    {% endfor %}\n\n    merge into {{ target }} d\n    using {{ source }} s\n    on (s.dbt_scd_id = d.dbt_scd_id)\n\n    when matched\n        then update\n        set dbt_valid_to = s.dbt_valid_to\n        where d.dbt_valid_to is null\n          and s.dbt_change_type in ('update', 'delete')\n    when not matched\n        then insert ({{ dest_cols_csv | join(', ') }})\n        values ({{ insert_cols_csv | join(', ') }})\n        where s.dbt_change_type = 'insert'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.46925, "supported_languages": null}, "macro.dbt_oracle.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "unique_id": "macro.dbt_oracle.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} FROM dual\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt_oracle.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.47246, "supported_languages": null}, "macro.dbt_oracle.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "unique_id": "macro.dbt_oracle.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {% set node_database = node.database %}\n    {% if node_database == 'None' or model_database is undefined or model_database is none %}\n        {% set node_database = get_database_name() %}\n    {% endif %}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n\n    {%- set target_relation = adapter.get_relation(database=node_database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_oracle.get_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.473529, "supported_languages": null}, "macro.dbt_oracle.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "unique_id": "macro.dbt_oracle.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n    {# updated_at should be cast as timestamp because in hash computation \"CAST(date as VARCHAR)\" truncates time fields  #}\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, 'CAST(' ~ updated_at ~ ' AS TIMESTAMP)']) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.474168, "supported_languages": null}, "macro.dbt_oracle.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "unique_id": "macro.dbt_oracle.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.489307, "supported_languages": null}, "macro.dbt_oracle.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "unique_id": "macro.dbt_oracle.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.4895291, "supported_languages": null}, "macro.dbt_oracle.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "unique_id": "macro.dbt_oracle.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.4896488, "supported_languages": null}, "macro.dbt_oracle.oracle__post_snapshot": {"name": "oracle__post_snapshot", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "unique_id": "macro.dbt_oracle.oracle__post_snapshot", "macro_sql": "{% macro oracle__post_snapshot(staging_relation) %}\n    {% do adapter.truncate_relation(staging_relation) %}\n    {% do adapter.drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.489795, "supported_languages": null}, "macro.dbt_oracle.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "unique_id": "macro.dbt_oracle.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select {{ target_relation }}.*,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            snapshot_query.*,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            snapshot_query.*,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            snapshot_query.*,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.490499, "supported_languages": null}, "macro.dbt_oracle.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "unique_id": "macro.dbt_oracle.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select sbq.*,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        cast(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as DATE) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.490699, "supported_languages": null}, "macro.dbt_oracle.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "unique_id": "macro.dbt_oracle.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.491123, "supported_languages": null}, "macro.dbt_oracle.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "unique_id": "macro.dbt_oracle.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt_oracle.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.491449, "supported_languages": null}, "macro.dbt_oracle.materialization_snapshot_oracle": {"name": "materialization_snapshot_oracle", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "unique_id": "macro.dbt_oracle.materialization_snapshot_oracle", "macro_sql": "{% materialization snapshot, adapter='oracle' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  {%- set grant_config = config.get('grants') -%}\n  {% set model_database = model.database %}\n  {% if model_database == 'None' or model_database is undefined or model_database is none %}\n    {% set model_database = get_database_name() %}\n  {% endif %}\n\n  {% if not adapter.check_schema_exists(model_database, model.schema) %}\n    {% do create_schema(model_database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model_database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(column.name) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_oracle.get_database_name", "macro.dbt.create_schema", "macro.dbt_oracle.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt_oracle.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt_oracle.build_snapshot_staging_table", "macro.dbt_oracle.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_oracle.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.4941409, "supported_languages": ["sql"]}, "macro.dbt_oracle.oracle__snapshot_hash_arguments": {"name": "oracle__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "unique_id": "macro.dbt_oracle.oracle__snapshot_hash_arguments", "macro_sql": "{% macro oracle__snapshot_hash_arguments(args) -%}\n    ORA_HASH({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar(50) ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.494336, "supported_languages": null}, "macro.dbt_oracle.oracle_basic_load_csv_rows": {"name": "oracle_basic_load_csv_rows", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "unique_id": "macro.dbt_oracle.oracle_basic_load_csv_rows", "macro_sql": "{% macro oracle_basic_load_csv_rows(model, batch_size, agate_table) %}\n\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert all\n            {% for row in chunk -%}\n              into {{ this.render() }} ({{ cols_sql }}) values(\n                {%- for column in agate_table.column_names -%}\n                    :p{{ loop.index }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor %})\n            {% endfor %}\n            select * from dual\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.495714, "supported_languages": null}, "macro.dbt_oracle.oracle__load_csv_rows": {"name": "oracle__load_csv_rows", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "unique_id": "macro.dbt_oracle.oracle__load_csv_rows", "macro_sql": "{% macro oracle__load_csv_rows(model, agate_table) %}\n  {{ return(oracle_basic_load_csv_rows(model, 100, agate_table) )}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle_basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.495856, "supported_languages": null}, "macro.dbt_oracle.oracle_incremental_upsert_backup": {"name": "oracle_incremental_upsert_backup", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_oracle.oracle_incremental_upsert_backup", "macro_sql": "{% macro oracle_incremental_upsert_backup(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='name') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.503695, "supported_languages": null}, "macro.dbt_oracle.oracle_check_and_quote_unique_key_for_incremental_merge": {"name": "oracle_check_and_quote_unique_key_for_incremental_merge", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_oracle.oracle_check_and_quote_unique_key_for_incremental_merge", "macro_sql": "{% macro oracle_check_and_quote_unique_key_for_incremental_merge(unique_key, incremental_predicates=none) %}\n    {%- set quote = \"\\\"\" -%}\n    {%- set unique_key_list = [] -%}\n    {%- set unique_key_merge_predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n          {% for key in unique_key | unique %}\n                {% if adapter.should_identifier_be_quoted(key, model.columns) == true %}\n                    {% do unique_key_list.append(quote ~ key ~ quote) %}\n                {% else %}\n                    {% do unique_key_list.append(key.upper()) %}\n                {% endif %}\n          {% endfor %}\n    {% else %}\n        {% if adapter.should_identifier_be_quoted(unique_key, model.columns) == true %}\n            {% do unique_key_list.append(quote ~ unique_key ~ quote) %}\n        {% else %}\n            {% do unique_key_list.append(unique_key.upper()) %}\n        {% endif %}\n    {% endif %}\n    {% for key in unique_key_list %}\n        {% set this_key_match %}\n            DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n        {% endset %}\n        {% do unique_key_merge_predicates.append(this_key_match) %}\n    {% endfor %}\n    {%- set unique_key_result = {'unique_key_list': unique_key_list, 'unique_key_merge_predicates': unique_key_merge_predicates} -%}\n    {{ return(unique_key_result)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5047839, "supported_languages": null}, "macro.dbt_oracle.oracle__get_merge_update_columns": {"name": "oracle__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_oracle.oracle__get_merge_update_columns", "macro_sql": "{% macro oracle__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute='name') | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.name) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n   {%- set quoted_update_columns = [] -%}\n   {% for col in update_columns %}\n        {% do quoted_update_columns.append(adapter.check_and_quote_identifier(col, model.columns)) %}\n   {% endfor %}\n   {{ return(quoted_update_columns)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.505481, "supported_languages": null}, "macro.dbt_oracle.oracle__get_incremental_append_sql": {"name": "oracle__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_oracle.oracle__get_incremental_append_sql", "macro_sql": "{% macro oracle__get_incremental_append_sql(args_dict) %}\n    {%- set parallel = config.get('parallel', none) -%}\n    {%- set dest_columns = args_dict[\"dest_columns\"] -%}\n    {%- set temp_relation = args_dict[\"temp_relation\"] -%}\n    {%- set target_relation = args_dict[\"target_relation\"] -%}\n    {%- set dest_column_names = dest_columns | map(attribute='name') | list -%}\n    {%- set dest_cols_csv = get_quoted_column_csv(model, dest_column_names)  -%}\n    INSERT {% if parallel %} /*+PARALLEL({{ parallel }})*/ {% endif %} INTO {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       SELECT {{ dest_cols_csv }}\n       FROM {{ temp_relation }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.505944, "supported_languages": null}, "macro.dbt_oracle.oracle__get_incremental_merge_sql": {"name": "oracle__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_oracle.oracle__get_incremental_merge_sql", "macro_sql": "{% macro oracle__get_incremental_merge_sql(args_dict) %}\n    {%- set parallel = config.get('parallel', none) -%}\n    {%- set dest_columns = args_dict[\"dest_columns\"] -%}\n    {%- set temp_relation = args_dict[\"temp_relation\"] -%}\n    {%- set target_relation = args_dict[\"target_relation\"] -%}\n    {%- set unique_key = args_dict[\"unique_key\"] -%}\n    {%- set dest_column_names = dest_columns | map(attribute='name') | list -%}\n    {%- set dest_cols_csv = get_quoted_column_csv(model, dest_column_names)  -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set incremental_predicates = args_dict[\"incremental_predicates\"] -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- if unique_key -%}\n        {%- set unique_key_result = oracle_check_and_quote_unique_key_for_incremental_merge(unique_key, incremental_predicates) -%}\n        {%- set unique_key_list = unique_key_result['unique_key_list'] -%}\n        {%- set unique_key_merge_predicates = unique_key_result['unique_key_merge_predicates'] -%}\n        merge {% if parallel %} /*+parallel({{ parallel }})*/ {% endif %} into {{ target_relation }} DBT_INTERNAL_DEST\n          using {{ temp_relation }} DBT_INTERNAL_SOURCE\n          on ({{ unique_key_merge_predicates | join(' AND ') }})\n        when matched then\n          update set\n          {% for col in update_columns if (col.upper() not in unique_key_list and col not in unique_key_list) -%}\n            DBT_INTERNAL_DEST.{{ col }} = DBT_INTERNAL_SOURCE.{{ col }}{% if not loop.last %}, {% endif %}\n          {% endfor -%}\n        when not matched then\n          insert({{ dest_cols_csv }})\n          values(\n            {% for col in dest_columns -%}\n              DBT_INTERNAL_SOURCE.{{ adapter.check_and_quote_identifier(col.name, model.columns) }}{% if not loop.last %}, {% endif %}\n            {% endfor -%}\n          )\n    {%- else -%}\n    insert {% if parallel %} /*+parallel({{ parallel }})*/ {% endif %} into  {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ temp_relation }}\n    )\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.get_quoted_column_csv", "macro.dbt.get_merge_update_columns", "macro.dbt_oracle.oracle_check_and_quote_unique_key_for_incremental_merge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.507213, "supported_languages": null}, "macro.dbt_oracle.oracle__get_incremental_default_sql": {"name": "oracle__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "unique_id": "macro.dbt_oracle.oracle__get_incremental_default_sql", "macro_sql": "{% macro oracle__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_merge_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5073369, "supported_languages": null}, "macro.dbt_oracle.materialization_incremental_oracle": {"name": "materialization_incremental_oracle", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "unique_id": "macro.dbt_oracle.materialization_incremental_oracle", "macro_sql": "{% materialization incremental, adapter='oracle', supported_languages=['sql', 'python'] %}\n\n  {% set unique_key = config.get('unique_key') %}\n  {% set full_refresh_mode = flags.FULL_REFRESH %}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set  grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql, language) %}\n  {% elif existing_relation.is_view or full_refresh_mode %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n      {% if existing_relation.is_view %}\n            {% do adapter.drop_relation(existing_relation) %}\n      {% else %}\n            {% do adapter.rename_relation(existing_relation, backup_relation) %}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql, language) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do to_drop.append(tmp_relation) %}\n      {% call statement(\"make_tmp_relation\", language=language) %}\n        {{create_table_as(True, tmp_relation, sql, language)}}\n      {% endcall %}\n      {#-- After this language should be SQL --#}\n      {% set language = 'sql' %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n      {% if not dest_columns %}\n        {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n      {% endif %}\n\n      {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n      {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n      {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n      {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n      {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n      {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.truncate_relation(rel) %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% set should_revoke = should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.process_schema_changes", "macro.dbt.persist_docs", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.510925, "supported_languages": ["sql", "python"]}, "macro.dbt_oracle.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt_oracle.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.511316, "supported_languages": null}, "macro.dbt_oracle.oracle__get_test_sql": {"name": "oracle__get_test_sql", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt_oracle.oracle__get_test_sql", "macro_sql": "{% macro oracle__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      case when {{ fail_calc }} {{ warn_if }} then 1 else 0 end as should_warn,\n      case when {{ fail_calc }} {{ error_if }} then 1 else 0 end as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.511542, "supported_languages": null}, "macro.dbt_oracle.materialization_table_oracle": {"name": "materialization_table_oracle", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "unique_id": "macro.dbt_oracle.materialization_table_oracle", "macro_sql": "{% materialization table, adapter='oracle', supported_languages=['sql', 'python'] %}\n  {% set identifier = model['alias'] %}\n  {% set grant_config = config.get('grants') %}\n  {% set language = model['language'] %}\n  {% set tmp_identifier = model['alias'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['alias'] + '__dbt_backup' %}\n  {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n  {% set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') %}\n  {% set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') %}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) %}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {% set backup_relation_type = 'table' if old_relation is none else old_relation.type %}\n  {% set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) %}\n  -- as above, the backup_relation should not already exist\n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) %}\n\n\n    {% do log(\"Preexisting intermediate relation=\" ~ preexisting_intermediate_relation) %}\n    {% do log(\"Preexisting backup relation=\" ~ preexisting_backup_relation) %}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) %}\n    {{ create_table_as(False, intermediate_relation, sql, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {% if old_relation.is_view %}\n            {% do adapter.drop_relation(old_relation) %}\n      {% else %}\n            {% do adapter.rename_relation(old_relation, backup_relation) %}\n      {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5164502, "supported_languages": ["sql", "python"]}, "macro.dbt_oracle.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "unique_id": "macro.dbt_oracle.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code.replace(model.raw_code, \"\", 1) }}\n    def materialize(df, table, session):\n        if isinstance(df, pd.core.frame.DataFrame):\n           oml.create(df, table=table)\n        elif isinstance(df, oml.core.frame.DataFrame):\n           df.materialize(table=table)\n\n    dbt = dbtObj(load_df_function=oml.sync)\n    final_df = model(dbt, session=oml)\n\n    {{ log(\"Python model materialization is \" ~ model.config.materialized, info=True) }}\n    {% if model.config.materialized.lower() == 'table' %}\n    table_name = f\"{dbt.this.identifier}__dbt_tmp\"\n    {% else %}\n    # incremental materialization\n    {% if temporary %}\n    table_name = \"{{target_relation.identifier}}\"\n    {% else %}\n    table_name = dbt.this.identifier\n    {% endif %}\n    {% endif %}\n    materialize(final_df, table=table_name.upper(), session=oml)\n    return pd.DataFrame.from_dict({\"result\": [1]})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.517045, "supported_languages": null}, "macro.dbt_oracle.materialization_view_oracle": {"name": "materialization_view_oracle", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "unique_id": "macro.dbt_oracle.materialization_view_oracle", "macro_sql": "\n{%- materialization view, adapter='oracle' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set grant_config = config.get('grants') -%}\n  {%- set backup_identifier = model['alias'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- if old_relation was a table\n  {% if old_relation is not none and old_relation.type == 'table' %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5195289, "supported_languages": ["sql"]}, "macro.dbt_oracle.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/python_model/python.sql", "original_file_path": "macros/materializations/python_model/python.sql", "unique_id": "macro.dbt_oracle.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\n    def ref(*args, **kwargs):\n        refs = {{ ref_dict | tojson }}\n        key = \".\".join(args)\n        version = kwargs.get(\"v\") or kwargs.get(\"version\")\n        if version:\n            key += f\".v{version}\"\n        schema, table = refs[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.521353, "supported_languages": null}, "macro.dbt_oracle.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/python_model/python.sql", "original_file_path": "macros/materializations/python_model/python.sql", "unique_id": "macro.dbt_oracle.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\n    def source(*args, dbt_load_df_function):\n        sources = {{ source_dict | tojson }}\n        key = \".\".join(args)\n        schema, table = sources[key].split(\".\")\n        # Use oml.sync(schema=schema, table=table)\n        return dbt_load_df_function(schema=schema.upper(), table=table.upper())\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.521663, "supported_languages": null}, "macro.dbt_oracle.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/python_model/python.sql", "original_file_path": "macros/materializations/python_model/python.sql", "unique_id": "macro.dbt_oracle.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\n    config_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.522102, "supported_languages": null}, "macro.dbt_oracle.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/python_model/python.sql", "original_file_path": "macros/materializations/python_model/python.sql", "unique_id": "macro.dbt_oracle.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\ndef main():\n    import oml\n    import pandas as pd\n    {{ build_ref_function(model ) }}\n    {{ build_source_function(model ) }}\n    {{ build_config_dict(model) }}\n\n    class config:\n        def __init__(self, *args, **kwargs):\n            pass\n\n        @staticmethod\n        def get(key, default=None):\n            return config_dict.get(key, default)\n\n    class this:\n        \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n        database = \"{{ this.database }}\"\n        schema = \"{{ this.schema }}\"\n        identifier = \"{{ this.identifier }}\"\n        def __repr__(self):\n            return \"{{ this }}\"\n\n\n    class dbtObj:\n        def __init__(self, load_df_function) -> None:\n            self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n            self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n            self.config = config\n            self.this = this()\n            self.is_incremental = {{ is_incremental() }}\n\n    {{ model.raw_code | indent(width=4, first=False, blank=True)}}\n\n\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.build_ref_function", "macro.dbt_oracle.build_source_function", "macro.dbt_oracle.build_config_dict", "macro.dbt.is_incremental", "macro.dbt_oracle.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5224938, "supported_languages": null}, "macro.dbt_oracle.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/materializations/python_model/python.sql", "original_file_path": "macros/materializations/python_model/python.sql", "unique_id": "macro.dbt_oracle.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5225532, "supported_languages": null}, "macro.dbt_oracle.oracle__except": {"name": "oracle__except", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_oracle.oracle__except", "macro_sql": "{% macro oracle__except() %}\n    MINUS\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.52266, "supported_languages": null}, "macro.dbt_oracle.oracle__date_trunc": {"name": "oracle__date_trunc", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/datetrunc.sql", "original_file_path": "macros/utils/datetrunc.sql", "unique_id": "macro.dbt_oracle.oracle__date_trunc", "macro_sql": "{% macro oracle__date_trunc(datepart, date) %}\n    {% if datepart.upper() == 'QUARTER' %}\n        {% set datepart = 'Q' %}\n    {% endif %}\n    {% if datepart.upper() == 'WEEK' %}\n        {% set datepart = 'WW' %}\n    {% endif %}\n    {%- set single_quote = \"\\'\" -%}\n    TRUNC({{date}}, {{single_quote ~ datepart ~ single_quote}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5231302, "supported_languages": null}, "macro.dbt_oracle.oracle__dateadd": {"name": "oracle__dateadd", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_oracle.oracle__dateadd", "macro_sql": "{% macro oracle__dateadd(datepart, interval, from_date_or_timestamp) %}\n    {%- set single_quote = \"\\'\" -%}\n    {%- set D2S_INTERVAL_UNITS = ['DAY', 'HOUR', 'MINUTE', 'SECOND'] -%}\n    {%- set M2Y_INTERVAL_UNITS = ['YEAR','MONTH'] -%}\n    {%- if datepart.upper() in D2S_INTERVAL_UNITS -%}\n        {{ from_date_or_timestamp }} + NUMTODSINTERVAL({{ interval }}, {{single_quote ~ datepart ~ single_quote}})\n    {%- elif datepart.upper() in M2Y_INTERVAL_UNITS -%}\n        {{ from_date_or_timestamp }} + NUMTOYMINTERVAL({{ interval }}, {{single_quote ~ datepart ~ single_quote}})\n    {%- elif datepart.upper() == 'QUARTER' -%}\n        ADD_MONTHS({{ from_date_or_timestamp }}, 3*{{ interval }})\n    {% elif datepart.upper() == 'WEEK' %}\n        {{ from_date_or_timestamp }} + 7*{{ interval }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.523978, "supported_languages": null}, "macro.dbt_oracle.oracle__current_timestamp": {"name": "oracle__current_timestamp", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_oracle.oracle__current_timestamp", "macro_sql": "{% macro oracle__current_timestamp() -%}\n  SYS_EXTRACT_UTC(current_timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.524122, "supported_languages": null}, "macro.dbt_oracle.oracle__snapshot_string_as_time": {"name": "oracle__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_oracle.oracle__snapshot_string_as_time", "macro_sql": "{% macro oracle__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"TO_TIMESTAMP('\"~ timestamp ~ \"','yyyy/mm/dd hh24:mi:ss.FF')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.524257, "supported_languages": null}, "macro.dbt_oracle.oracle__right": {"name": "oracle__right", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_oracle.oracle__right", "macro_sql": "{% macro oracle__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.524471, "supported_languages": null}, "macro.dbt_oracle.oracle__datediff": {"name": "oracle__datediff", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_oracle.oracle__datediff", "macro_sql": "{% macro oracle__datediff(first_date, second_date, datepart) %}\n    {% if datepart.upper() == 'YEAR' %}\n        ROUND(MONTHS_BETWEEN(TRUNC(CAST({{second_date}} AS DATE), 'YEAR'), TRUNC(CAST({{first_date}} AS DATE), 'YEAR'))/12)\n    {% elif datepart.upper() == 'QUARTER' %}\n        ROUND(MONTHS_BETWEEN(TRUNC(CAST({{second_date}} AS DATE), 'Q'), TRUNC(CAST({{first_date}} AS DATE), 'Q'))/3)\n    {% elif datepart.upper() == 'MONTH'%}\n        ROUND(MONTHS_BETWEEN(TRUNC(CAST({{second_date}} AS DATE), 'MONTH'), TRUNC(CAST({{first_date}} AS DATE), 'MONTH')))\n    {% elif datepart.upper() == 'WEEK' %}\n        ROUND((TRUNC(CAST({{ second_date }} AS DATE), 'DAY') - TRUNC(CAST({{ first_date }} AS DATE), 'DAY'))/7)\n    {% elif datepart.upper() == 'DAY' %}\n        ROUND(TRUNC(CAST({{ second_date }} AS DATE), 'DD') - TRUNC(CAST({{ first_date }} AS DATE), 'DD'))\n    {% elif datepart.upper() == 'HOUR' %}\n        ROUND((TRUNC(CAST({{ second_date }} AS DATE), 'HH') - TRUNC(CAST({{ first_date }} AS DATE), 'HH'))*24)\n    {% elif datepart.upper() == 'MINUTE' %}\n        ROUND((TRUNC(CAST({{ second_date }} AS DATE), 'MI') - TRUNC(CAST({{ first_date }} AS DATE), 'MI'))*24*60)\n    {% elif datepart.upper() == 'SECOND' %}\n        EXTRACT(DAY FROM (CAST({{ second_date }} AS TIMESTAMP) - CAST({{ first_date }} AS TIMESTAMP)))*24*60*60\n        +EXTRACT(HOUR FROM (CAST({{ second_date }} AS TIMESTAMP) - CAST({{ first_date }} AS TIMESTAMP)))*60*60\n        +EXTRACT(MINUTE FROM (CAST({{ second_date }} AS TIMESTAMP) - CAST({{ first_date }} AS TIMESTAMP)))*60\n        +EXTRACT(SECOND FROM (CAST({{ second_date }} AS TIMESTAMP) - CAST({{ first_date }} AS TIMESTAMP)))\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5259688, "supported_languages": null}, "macro.dbt_oracle.oracle__hash": {"name": "oracle__hash", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_oracle.oracle__hash", "macro_sql": "{% macro oracle__hash(field, method='MD5') %}\n    {%- set single_quote = \"\\'\" -%}\n    STANDARD_HASH({{field}}, {{single_quote ~ method  ~ single_quote }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5262039, "supported_languages": null}, "macro.dbt_oracle.oracle__cast_bool_to_text": {"name": "oracle__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt_oracle.oracle__cast_bool_to_text", "macro_sql": "{% macro oracle__cast_bool_to_text(bool_expression) %}\n    CASE\n        WHEN {{ bool_expression }} THEN 'true'\n        ELSE 'false'\n    END\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5263412, "supported_languages": null}, "macro.dbt_oracle.oracle__position": {"name": "oracle__position", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_oracle.oracle__position", "macro_sql": "{% macro oracle__position(substring_text, string_text) %}\n    INSTR({{ string_text }}, {{ substring_text }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5264919, "supported_languages": null}, "macro.dbt_oracle.oracle__type_bigint": {"name": "oracle__type_bigint", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt_oracle.oracle__type_bigint", "macro_sql": "\n{%- macro oracle__type_bigint() -%}\n    NUMBER(19)\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.526625, "supported_languages": null}, "macro.dbt_oracle.oracle__type_int": {"name": "oracle__type_int", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt_oracle.oracle__type_int", "macro_sql": "\n{%- macro oracle__type_int() -%}\n    NUMBER(10, 0)\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5266821, "supported_languages": null}, "macro.dbt_oracle.oracle__type_boolean": {"name": "oracle__type_boolean", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt_oracle.oracle__type_boolean", "macro_sql": "{% macro oracle__type_boolean() -%}\n    NUMBER(1)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.52674, "supported_languages": null}, "macro.dbt_oracle.oracle__last_day": {"name": "oracle__last_day", "resource_type": "macro", "package_name": "dbt_oracle", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_oracle.oracle__last_day", "macro_sql": "{% macro oracle__last_day(date, datepart) %}\n    {{dbt.dateadd('day', '-1', dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date)))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.527006, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5278442, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.528003, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.52811, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.528221, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.528325, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5286028, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.528922, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.529141, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5294652, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.529666, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5322728, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5323992, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.532562, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5330849, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.53321, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5333362, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5343528, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5352771, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.538365, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.538583, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.538709, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.538778, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5388842, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.538965, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.539115, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.539775, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.539913, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.540096, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5403981, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.544919, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.546417, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.546747, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5469701, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5472472, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5475159, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.548707, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.549108, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.549592, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.549762, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.550278, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.554944, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.556101, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.556294, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.55701, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.557203, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.557677, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.558167, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5588229, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.558989, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5591218, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.559328, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.559469, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.559671, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5598028, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5599868, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5601878, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.560301, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.560499, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.564107, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.568276, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.569142, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.569986, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5705972, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.571336, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.571423, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5718012, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5719209, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5720162, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(model['columns'])) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.572812, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5730891, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.573337, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.575201, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.57584, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.575973, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.576276, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5767481, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5770829, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5772219, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5773509, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.579303, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.57952, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.57968, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5807638, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5810702, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5811882, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.581315, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.58162, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.583922, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.587637, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.588272, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5884402, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.588781, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.588919, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5890172, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.589118, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.589201, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.589311, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.589393, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.589731, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.589865, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5907981, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.591108, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5913758, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.591763, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5919511, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.59216, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.592445, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.592628, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.592884, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5930948, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5932748, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.593712, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.594774, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.595194, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.595405, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.59677, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.597614, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.598151, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.598321, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.598486, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.598542, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.598779, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5989041, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.5991008, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.599193, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.599387, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.599463, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.599939, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.60006, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6002262, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.600283, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.600479, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.600658, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.600919, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.601023, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.601495, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.601804, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.602056, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6021771, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6023948, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.602509, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6026938, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6028118, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.602992, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6031182, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6033049, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6033962, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.603664, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.603793, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.603997, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.604075, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.604809, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.604922, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.60504, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.605264, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6053839, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.605495, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.60562, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.605747, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_oracle.oracle__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.605866, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.605985, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_oracle.oracle__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6061041, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6062121, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_oracle.oracle__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.606327, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6064372, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.606646, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6067462, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.606932, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6070101, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.607268, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.607465, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6075761, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.607957, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.608078, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6082401, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.608444, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6085382, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.608813, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6090019, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.609209, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6093068, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.609592, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.609823, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6099358, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.610068, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_oracle.oracle__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.610433, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.610549, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.610653, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6107268, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6108558, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.61091, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6110258, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.611146, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.611479, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.61158, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6116962, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.611996, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.614555, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.614677, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6148322, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.615045, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6152241, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.615455, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.615585, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6157398, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.615872, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.615989, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.616131, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.616405, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6165838, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.616982, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6171598, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.617264, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6174028, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.617706, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.618001, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.619273, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.619355, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6194801, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6195688, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.619821, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6199539, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6200268, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6201909, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.62033, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.620492, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6206238, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.620787, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.621273, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6214132, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.621589, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.621753, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.622653, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.623163, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6232839, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.623426, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.62355, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.62375, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.624104, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.625227, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.62542, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6255538, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.62567, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.625797, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.62597, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6261172, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.626333, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.626466, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.626587, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.628233, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.628347, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6285708, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.62873, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.628881, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6290078, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.62956, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.629876, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.630005, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6302562, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6304178, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6308439, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.631028, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.631592, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6328251, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.632936, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6335292, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.633829, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.634248, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.63459, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.634645, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.635027, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.635196, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.635401, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_oracle.oracle__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1689010794.6355982, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.oracle_dbt.stg_users": ["seed.oracle_dbt.raw_users"], "seed.oracle_dbt.raw_users": [], "seed.oracle_dbt.invoices": [], "model.oracle_dbt.stg_invoices": ["seed.oracle_dbt.invoices"], "model.oracle_dbt.invoice_model": ["seed.oracle_dbt.invoices"], "model.oracle_dbt.average_duration_by_platform_country": ["model.oracle_dbt.combined_categorized_events"], "model.oracle_dbt.event_counts_by_platform": ["model.oracle_dbt.combined_categorized_events"], "model.oracle_dbt.event_type_counts": ["model.oracle_dbt.combined_categorized_events"], "model.oracle_dbt.combined_categorized_events": ["model.oracle_dbt.stg_mobile_events", "model.oracle_dbt.stg_web_events"], "model.oracle_dbt.mobile_event_durations": ["model.oracle_dbt.stg_mobile_events", "model.oracle_dbt.stg_web_events"], "model.oracle_dbt.most_active_mobile_users": ["model.oracle_dbt.stg_mobile_events", "model.oracle_dbt.stg_users", "model.oracle_dbt.stg_web_events"], "model.oracle_dbt.most_frequent_browser": ["model.oracle_dbt.stg_mobile_events", "model.oracle_dbt.stg_users", "model.oracle_dbt.stg_web_events"], "model.oracle_dbt.web_events_counts": ["model.oracle_dbt.stg_mobile_events", "model.oracle_dbt.stg_web_events"], "model.oracle_dbt.web_events_distinct_vals": ["model.oracle_dbt.stg_web_events"], "model.oracle_dbt.web_events_max_min_vals": ["model.oracle_dbt.stg_web_events"], "model.oracle_dbt.web_events_null_vals": ["model.oracle_dbt.stg_web_events"], "model.oracle_dbt.stg_web_events": ["source.oracle_dbt.FAWDBTCORE.web_events"], "model.oracle_dbt.mobile_events_distinct_vals": ["model.oracle_dbt.stg_mobile_events"], "model.oracle_dbt.mobile_events_max_min_vals": ["model.oracle_dbt.stg_mobile_events"], "model.oracle_dbt.mobile_events_null_vals": ["model.oracle_dbt.stg_mobile_events"], "model.oracle_dbt.stg_mobile_events": ["source.oracle_dbt.FAWDBTCORE.mobile_events"], "model.oracle_dbt.regression": ["source.oracle_dbt.FAWDBTCORE.web_order_info"], "model.oracle_dbt.max_product_revenue": ["model.oracle_dbt.stg_web_order_info"], "model.oracle_dbt.web_events_python": ["model.oracle_dbt.stg_web_order_info"], "model.oracle_dbt.stg_web_order_info": ["source.oracle_dbt.FAWDBTCORE.web_order_info"], "model.oracle_dbt.highest_user_id": ["source.oracle_dbt.FAWDBTCORE.raw_users"], "test.oracle_dbt.accepted_values_average_duration_by_platform_country_platform__Web__Mobile.1e2cf909c9": ["model.oracle_dbt.average_duration_by_platform_country"], "test.oracle_dbt.not_null_average_duration_by_platform_country_platform.300d2e0ab7": ["model.oracle_dbt.average_duration_by_platform_country"], "test.oracle_dbt.accepted_values_average_duration_by_platform_country_country__USA__UK__Germany__Canada__Mexico__China__India.fc932b734c": ["model.oracle_dbt.average_duration_by_platform_country"], "test.oracle_dbt.not_null_average_duration_by_platform_country_country.4f6c2ff4e0": ["model.oracle_dbt.average_duration_by_platform_country"], "test.oracle_dbt.not_null_average_duration_by_platform_country_avg_duration.c43369543e": ["model.oracle_dbt.average_duration_by_platform_country"], "test.oracle_dbt.accepted_values_event_counts_by_platform_platform__Web__Mobile.4c8d6ebeee": ["model.oracle_dbt.event_counts_by_platform"], "test.oracle_dbt.not_null_event_counts_by_platform_platform.32886038f3": ["model.oracle_dbt.event_counts_by_platform"], "test.oracle_dbt.unique_event_counts_by_platform_platform.9320c3557f": ["model.oracle_dbt.event_counts_by_platform"], "test.oracle_dbt.not_null_event_counts_by_platform_event_count.8d7650eca5": ["model.oracle_dbt.event_counts_by_platform"], "test.oracle_dbt.accepted_values_mobile_event_durations_operating_system__iOS__Windows__Android__Linux.95126d4a59": ["model.oracle_dbt.mobile_event_durations"], "test.oracle_dbt.not_null_mobile_event_durations_operating_system.f2ad66918d": ["model.oracle_dbt.mobile_event_durations"], "test.oracle_dbt.unique_mobile_event_durations_operating_system.d298e49ef8": ["model.oracle_dbt.mobile_event_durations"], "test.oracle_dbt.not_null_mobile_event_durations_avg_duration.3a820931c4": ["model.oracle_dbt.mobile_event_durations"], "test.oracle_dbt.not_null_most_active_mobile_users_name.8bbc965395": ["model.oracle_dbt.most_active_mobile_users"], "test.oracle_dbt.not_null_most_active_mobile_users_num_mobile_events.cae10138ea": ["model.oracle_dbt.most_active_mobile_users"], "test.oracle_dbt.not_null_most_frequent_browser_name.32d8a1b928": ["model.oracle_dbt.most_frequent_browser"], "test.oracle_dbt.not_null_most_frequent_browser_most_frequent_browser.4670c59ec9": ["model.oracle_dbt.most_frequent_browser"], "model.oracle_dbt.requisition_anomaly": ["source.oracle_dbt.FAWDBTCORE.requisitions"], "source.oracle_dbt.FAWDBTCORE.web_events": [], "source.oracle_dbt.FAWDBTCORE.mobile_events": [], "source.oracle_dbt.FAWDBTCORE.web_order_info": [], "source.oracle_dbt.FAWDBTCORE.raw_users": [], "source.oracle_dbt.FAWDBTCORE.invoices": [], "source.oracle_dbt.FAWDBTCORE.requisitions": []}, "child_map": {"model.oracle_dbt.stg_users": ["model.oracle_dbt.most_active_mobile_users", "model.oracle_dbt.most_frequent_browser"], "seed.oracle_dbt.raw_users": ["model.oracle_dbt.stg_users"], "seed.oracle_dbt.invoices": ["model.oracle_dbt.invoice_model", "model.oracle_dbt.stg_invoices"], "model.oracle_dbt.stg_invoices": [], "model.oracle_dbt.invoice_model": [], "model.oracle_dbt.average_duration_by_platform_country": ["test.oracle_dbt.accepted_values_average_duration_by_platform_country_country__USA__UK__Germany__Canada__Mexico__China__India.fc932b734c", "test.oracle_dbt.accepted_values_average_duration_by_platform_country_platform__Web__Mobile.1e2cf909c9", "test.oracle_dbt.not_null_average_duration_by_platform_country_avg_duration.c43369543e", "test.oracle_dbt.not_null_average_duration_by_platform_country_country.4f6c2ff4e0", "test.oracle_dbt.not_null_average_duration_by_platform_country_platform.300d2e0ab7"], "model.oracle_dbt.event_counts_by_platform": ["test.oracle_dbt.accepted_values_event_counts_by_platform_platform__Web__Mobile.4c8d6ebeee", "test.oracle_dbt.not_null_event_counts_by_platform_event_count.8d7650eca5", "test.oracle_dbt.not_null_event_counts_by_platform_platform.32886038f3", "test.oracle_dbt.unique_event_counts_by_platform_platform.9320c3557f"], "model.oracle_dbt.event_type_counts": [], "model.oracle_dbt.combined_categorized_events": ["model.oracle_dbt.average_duration_by_platform_country", "model.oracle_dbt.event_counts_by_platform", "model.oracle_dbt.event_type_counts"], "model.oracle_dbt.mobile_event_durations": ["test.oracle_dbt.accepted_values_mobile_event_durations_operating_system__iOS__Windows__Android__Linux.95126d4a59", "test.oracle_dbt.not_null_mobile_event_durations_avg_duration.3a820931c4", "test.oracle_dbt.not_null_mobile_event_durations_operating_system.f2ad66918d", "test.oracle_dbt.unique_mobile_event_durations_operating_system.d298e49ef8"], "model.oracle_dbt.most_active_mobile_users": ["test.oracle_dbt.not_null_most_active_mobile_users_name.8bbc965395", "test.oracle_dbt.not_null_most_active_mobile_users_num_mobile_events.cae10138ea"], "model.oracle_dbt.most_frequent_browser": ["test.oracle_dbt.not_null_most_frequent_browser_most_frequent_browser.4670c59ec9", "test.oracle_dbt.not_null_most_frequent_browser_name.32d8a1b928"], "model.oracle_dbt.web_events_counts": [], "model.oracle_dbt.web_events_distinct_vals": [], "model.oracle_dbt.web_events_max_min_vals": [], "model.oracle_dbt.web_events_null_vals": [], "model.oracle_dbt.stg_web_events": ["model.oracle_dbt.combined_categorized_events", "model.oracle_dbt.mobile_event_durations", "model.oracle_dbt.most_active_mobile_users", "model.oracle_dbt.most_frequent_browser", "model.oracle_dbt.web_events_counts", "model.oracle_dbt.web_events_distinct_vals", "model.oracle_dbt.web_events_max_min_vals", "model.oracle_dbt.web_events_null_vals"], "model.oracle_dbt.mobile_events_distinct_vals": [], "model.oracle_dbt.mobile_events_max_min_vals": [], "model.oracle_dbt.mobile_events_null_vals": [], "model.oracle_dbt.stg_mobile_events": ["model.oracle_dbt.combined_categorized_events", "model.oracle_dbt.mobile_event_durations", "model.oracle_dbt.mobile_events_distinct_vals", "model.oracle_dbt.mobile_events_max_min_vals", "model.oracle_dbt.mobile_events_null_vals", "model.oracle_dbt.most_active_mobile_users", "model.oracle_dbt.most_frequent_browser", "model.oracle_dbt.web_events_counts"], "model.oracle_dbt.regression": [], "model.oracle_dbt.max_product_revenue": [], "model.oracle_dbt.web_events_python": [], "model.oracle_dbt.stg_web_order_info": ["model.oracle_dbt.max_product_revenue", "model.oracle_dbt.web_events_python"], "model.oracle_dbt.highest_user_id": [], "test.oracle_dbt.accepted_values_average_duration_by_platform_country_platform__Web__Mobile.1e2cf909c9": [], "test.oracle_dbt.not_null_average_duration_by_platform_country_platform.300d2e0ab7": [], "test.oracle_dbt.accepted_values_average_duration_by_platform_country_country__USA__UK__Germany__Canada__Mexico__China__India.fc932b734c": [], "test.oracle_dbt.not_null_average_duration_by_platform_country_country.4f6c2ff4e0": [], "test.oracle_dbt.not_null_average_duration_by_platform_country_avg_duration.c43369543e": [], "test.oracle_dbt.accepted_values_event_counts_by_platform_platform__Web__Mobile.4c8d6ebeee": [], "test.oracle_dbt.not_null_event_counts_by_platform_platform.32886038f3": [], "test.oracle_dbt.unique_event_counts_by_platform_platform.9320c3557f": [], "test.oracle_dbt.not_null_event_counts_by_platform_event_count.8d7650eca5": [], "test.oracle_dbt.accepted_values_mobile_event_durations_operating_system__iOS__Windows__Android__Linux.95126d4a59": [], "test.oracle_dbt.not_null_mobile_event_durations_operating_system.f2ad66918d": [], "test.oracle_dbt.unique_mobile_event_durations_operating_system.d298e49ef8": [], "test.oracle_dbt.not_null_mobile_event_durations_avg_duration.3a820931c4": [], "test.oracle_dbt.not_null_most_active_mobile_users_name.8bbc965395": [], "test.oracle_dbt.not_null_most_active_mobile_users_num_mobile_events.cae10138ea": [], "test.oracle_dbt.not_null_most_frequent_browser_name.32d8a1b928": [], "test.oracle_dbt.not_null_most_frequent_browser_most_frequent_browser.4670c59ec9": [], "model.oracle_dbt.requisition_anomaly": [], "source.oracle_dbt.FAWDBTCORE.web_events": ["model.oracle_dbt.stg_web_events"], "source.oracle_dbt.FAWDBTCORE.mobile_events": ["model.oracle_dbt.stg_mobile_events"], "source.oracle_dbt.FAWDBTCORE.web_order_info": ["model.oracle_dbt.regression", "model.oracle_dbt.stg_web_order_info"], "source.oracle_dbt.FAWDBTCORE.raw_users": ["model.oracle_dbt.highest_user_id"], "source.oracle_dbt.FAWDBTCORE.invoices": [], "source.oracle_dbt.FAWDBTCORE.requisitions": ["model.oracle_dbt.requisition_anomaly"]}, "group_map": {}}